model_answer,student_answer,grades
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree data order leave right,4
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree fundamental data structure use construct abstract data structure set multisets associative array,2
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree similar binary tree implement organize data specific way later search,3
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree tree also condition node maximum 2 child input data compare data tree start root value small root traverse leave large traverse right becomes leaf,4
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree node value total order define on value leave subtree node contain only value less node s value right subtree node contain only value great equal node s value,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,special binary tree rule subtrees on right small node value subtrees on left large node value,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree special organization data leave child element less it right child large it,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree value node n great value every node n s leave subtree less every value n s right subtree,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree data organize specific arangment,2
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree child order right side great current node leave less equal current node,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree finite set node either empty consits root two disjoint binary tree call left right subtrees,1
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree binary tree value node n great value every node n s leave subtree less every node n s right subtree,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,tree split base on value make easy search one compare desire value root root great than search leave side tree less than search right side thing recursively,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree search key node n great search key node n s leave subtree less search key node n s right subtree,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,tree small value locate on left parent node large value locate on right parent node,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree special tree node two child label leave child right child,1
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree node unique key leave child node only value less node right child node high value node,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,similar binary tree key nonempty leave subtree right subtree small large key root subtree value node leave subtree node less node value value node right subtree node great node value,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,tree set up easily search number base on location compare previous node,3
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary search tree special binary tree arrange every left child node contain value less parent every right child node contain value great parent,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,binary tree value node n great value every node n s leave subtree less value every node n s right subtree,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,tree node two node node on left le root node on right great root,4
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,set number arrange link node contain two pointer element node leave parent small node right large recursive implementation implies traverse order output sort,5
A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,tree data structure node value total order define on value leave subtree contains only value less parent node vice versa right subtree,5
A collection of elements that can be allocated dynamically.,link list data structure contain one data element pointer next node,4
A collection of elements that can be allocated dynamically.,link list chain structs record call node ability add delete retrieve item,4
A collection of elements that can be allocated dynamically.,list element node link one another element point next element,4
A collection of elements that can be allocated dynamically.,data structure sequence node contain arbitrary data field one two reference link point next and or previous node,4
A collection of elements that can be allocated dynamically.,item data structure link use pointer,4
A collection of elements that can be allocated dynamically.,data type contain pointer least next element list,4
A collection of elements that can be allocated dynamically.,link list list item list point next item list,4
A collection of elements that can be allocated dynamically.,consists sequence node contain number data field one two link call pointer point next previous node,4
A collection of elements that can be allocated dynamically.,list pointer link 2 other every pointer point next pointer next element,4
A collection of elements that can be allocated dynamically.,array base list use implicit order scheme often use pointer,1
A collection of elements that can be allocated dynamically.,information memory link next piece information only link forward not backwards,2
A collection of elements that can be allocated dynamically.,series structure contain data item pointer link structure next structure,4
A collection of elements that can be allocated dynamically.,link list collection object contain least one data member pointer next object list and previous object case doubly link list,4
A collection of elements that can be allocated dynamically.,list node node contains data member also pointer next node,4
A collection of elements that can be allocated dynamically.,linear collection self referential node connect pointer,4
A collection of elements that can be allocated dynamically.,list item link together item link successor,4
A collection of elements that can be allocated dynamically.,list object object contain link next item list,4
A collection of elements that can be allocated dynamically.,series node structure value pointer point similar node not quite array still carry list value,4
A collection of elements that can be allocated dynamically.,link list data structure build structure pointer form chain node pointer represent link chain hold entire thing together,4
A collection of elements that can be allocated dynamically.,link list one fundamental data structure use implement data structure consist sequence node contain arbitrary data field one two reference link point next and or previous node,4
A collection of elements that can be allocated dynamically.,one fundamental data structure use implement data structure consist sequence node contain arbitrary data field one two reference link point next and or previous node,4
A collection of elements that can be allocated dynamically.,sequence node contain data field specify programmer pointer s point next previous node,4
A collection of elements that can be allocated dynamically.,component contain node data item pointer next item list,4
A collection of elements that can be allocated dynamically.,link list chain structs record call node node least two member one point next item node list,4
A collection of elements that can be allocated dynamically.,link list chain node store single piece data pointer variable point node list,4
A collection of elements that can be allocated dynamically.,link list data structure not necessarily contiguous memory space such array hold data type point next data item list doubly link list also previous item,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",finite set node start root terminate leaf,3
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",one nod hierarchy start root branch off like tree subtrees,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",group data parent child structure,2
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",finite collection node start element call root child child child get leaf last element child,4
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree finite set one node that specially designate node call root,4
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",list number list make compare value node already tree add appropriate spot list make up node leave right pointer,1
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",connect undirected graph without cycle,4
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",organizes data nonlinear hierarchical form item one successor partition root node subset general subtrees root,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree series node node link node,1
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree data structure node link hierarchical manner,2
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree data structure one data node contain data node number attach child node create branched structure tree name for,4
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",data structure contain root internal node external node node reference another node mean pointer pas by reference root base tree no parent leaf node end tree point null,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree finite set one node specially designate node call root remain node partition n gt 0 disjoint set t n plus 1 element set tree,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree finite set one node specially designate node call root remain node partition disjoint set set tree,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",nonlinear two dimensional data structure,0
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",type data structure element attach one element directly beneath it,3
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",set data arrange pointer element many pointer no two pointer point element,1
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",finite set one nodes root node node split tree less value root,3
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree branch data structure nod leave special node call root no parent node however like node 2 node link to namely one on right one on left,4
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",set one node hierarchically organize one special â rootâ node,3
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",finite number node one root node node certain number child node child also tree,5
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",infinite set node root descendant addition leaf,2
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",hierarchy node sort particular order node ancestor except root child except leaf,3
"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",tree finite set one node specially designate node call root,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initializes object object class function class performs task display line text kind mathematical operation,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor cannot return value cannot specify return type normally constructor declare public,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor automatically call whenever instance class create function must explicitly call user,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor cannot return value not even void function get return value,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor special block statement call object create either declare statically construct on stack however function portion code within large program performs specific task independent rest code,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor cannot return value cannot specify return type like function can,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor function initialize class instance function performs whatever task write,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initialize value function usual performs sort operation,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor use create instance class name class function cannot name class compute data,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor cannot return value not even void use initialize object s data create whereas function create specific task return value,5
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initialises everything nothing leave empty random varioubles function modifies variables data,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor function use initialize object s data create,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor not return type,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor function not function constructor also function nearly infinite purpose constructor always create instance whichever class use change how constructor something not do function change not only how also what,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor use create object employ main function program not execute code along it function set code executes call not create new object,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor set up default value variable object instantiate whereas function allow interaction object,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initializes object function part object,1
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor cannot return value,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initialize data use calculation function,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor function use initialize object s data create call make implicitly object create must define name class constructor also cannot return value like function can,5
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor not need type use initialize variable,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor typically use intialize data member allocate resource instance memory file etc also constructor cannot return value function operation maybe globally define,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor create class object memory function perform action against object,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor call whenever new object class make,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",unlike regular function constructor only use initialize objectâ s data create constructor must also give name class cannot return value,5
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initialized value execution instantiation provide default value,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor call class create function call time,4
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor method start new instance class example employee employee1 parameter start new instance object type employee function simply module w in program completes single desire task,2
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor not return date no return type function return date not return data return type,3
"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor initialize data member function actually perform task constructor cant return value either,3
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",list element first one remove last one insert,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",adt whose recently insert item first item remove retrieved property call last in first lifo item enter leave stack top,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack data structure use push insert item pop remove ad item stack use last first structure insert remove item,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",data structure move element last first,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",collection data execute order last first,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",store set element particular order,0
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",abstract data type store set element particular order,1
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",store set element particular order,0
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",object list store elements particular order first object insert bottom last object top first object last object out,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",finite ordered list zero element,0
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",data structure put element list only allow user access last element,4
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack adt store set element particular order,1
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack type container adaptor specifically design operate lifo context last in first out element insert extract only end container,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",store set element particular order stack principle last first out mean last element insert first one remove,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",list only top or last item add modify,4
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",store set element last first order,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack abstract data type operate on last first basis store list object not support least pure stack peek element without remove rest stack first,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",list add remove only top,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",adt store set element particular order stack principles lifo last item insert list first out,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",store set element particular order base on principle last first lifo,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack data structure allow data member add removed one time order last first out structure,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",data structure store item access last in first out order implement three way,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack similar array not allow random access stack only allow user retrieve last item put stack last in fist out,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",data structure store data use lifo,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",storage container hold object certain order lifo priority,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",stack abstract data type base on principle last element insert stack first element remove stack,5
"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",data type store set element certain order last in first out,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",first in first abstract data type use store value,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",wait list item operation fifo first first out order,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",like stack us link list stack little differently fifo first thing enqueued first thing dequeued,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue fifo data structure,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue similar array except data only access sequentially rather random unlike stack queue follow fifo first in first out,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",like link list first first,4
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",quese list store set element particular order stack principle case first in first out first element insert first element remove,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",last in last architecture work way line bank work person that s wait long get serve first,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue list object particular order read one time start first follow second on,4
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue another data structure physical analogy queue line bank go bank customer go rear end line customer come off line i e service front line,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue store set element particular order principle operation fifo first first out mean first element insert first one remove,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",data structure c collection data keep order first first out,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue abstract data structure operation perform end give queue first first behavior,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",object store element order follow first first out first element add first one come off,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue data structure store element first first order,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue buffer store element particular order,2
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",data structure remove node head add node tail,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",adt whose first inserted item first item remove use fifo idea item enter queue back leave front,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue first first data structure,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",store set element particular order first in first principle,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",particular kind collection entity collection keep order principal or only operation on collection addition entity rear terminal position removal entity front terminal position first first fifo method,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",data structure performs operation order first first fifo,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue first first out data structure first element add also first remove,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue list thing follow first first behavior,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",queue storage container hold object first in first priority,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",store set element first element in first element remove,5
"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",finite ordered list zero element base upon first first,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like link list expect first last,0
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,data structure c first element queue first element take queue,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue linear first in first out data structure data must access order put queue only old item queue accessible time main function define enqueue dequeue,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue first first data structure much like line movie theatre first object line first object handle enact upon,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,lot like stack except first item put list first item take list,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,first first list item like put 5 4 3 2 1 queue dequeue item remove item order put in thus put out 5 4 3 2 1 exact order,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,list item user only access first element new element add end,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue data structure first node first node out,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,list object follow rule first first out essentially link list go order first object list first take off,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue set element first element insert first element remove,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,link list first in structure dequeue head list enqueue end list,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue like stack except follow fifo first first out,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,data structure implement first in first out element long first get serve,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue abstract data type involve put element back list queue use fifo first first out idea first element list first come out,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,particular set entity put certain order enqueue dequeue function,1.5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue buffer follow rule first first out queue useful computer science schedule,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue list data follow fifo principle example get line movie theater the first one get buy ticket first,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue data structure hold set object fifo first first out priority,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue data type operate filo first last out method mean first element insert queue first element remove,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like link list except first last,0
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue abstract data type base off priniple first first out fifo first item inserted list first item take out,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue data structure insert data fifo configuration be data input structure always end data take always begin,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,ordered list performs task order first first out add item queue place item behind rest them take item off queue take one wait long,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,first first out,4
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue abstract data type performs operation on end list exhibit first in first out behavior,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,data structure insert element end remove element front,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,queue collection element characteristic first first fifo first item first item out additional item add end list,5
A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,first first out data structure implement either link list array,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describe class s public interface without reveal class s member function implementation function definition show implementation do,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype declaration function tell compiler function s name return type type parameter,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function definition that definition prototype compiler use check call function correct,1
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function definition contain code function work function prototype show output input function name,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype locate h file only contain access function name paramater type function definition contain code function perform activity,4
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype declaration function exist cant use actual function function create definition within tell compiler function do,3
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function definition not require additional information need pass inside parenthesis execute definition prototype require one parameter pass order complete task,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype state function class before compilation definition actually hold source function,3
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype use reference compiler function define later on function definition actual function itself complete return type parameter etc,4
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype show only return type necessary parameter definition include name parameter defines object actually capable do,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype only name function return type argument list definition defines above well function actually do,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",functgion prototype declaration function function definition specifies function,3
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype tell compiler function name return type number type parameter without reveal implementation contain function definition,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function definition code define function place bracket determines function s operation function prototype show function s public interface without expose implementation show name return type type paramaters,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype simply declare function parameter function definition include necessary variable function s actual code,4
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype only declare name return type input type definition also define scope variable process return function,4
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype lay name return type number type parameter function expect receive certain order detail function prototype function definition,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype declaration function definition w multiple parameter often require one piece information perform task,3
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype tell compiler function name return type type parameter a function definition actually implement member function,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describe class s public interface,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype specify parameter function definition include parameter code body,4
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype declares use program definition,3
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describe class s public interface without provide how function work function definition contain inner working function,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype not include actual code function code execute program,3
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describes class interface without revile whatever inside function definition not that,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype create framework call function definition function definition function actually program created final product,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describe class s public interface without reveal class s member function implementation,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype programmer declare he she use function main like declare variable programmer know he she use future yet say go use it how answer question who give function name character function prototype common practice place begin program after include before main function definition gut function programmer decides function go tell how it take whatever information give performs operation work sort like brain brain take input base upon input performs way produce output function defintion place outside main function function entity think such,1
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype only tell user data type go function type return,5
"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype include return type name function parameter need function definition write code function do,5
A function that calls itself.,function call itself run multiple time base case reach,5
A function that calls itself.,function call till base case reach return back original function,5
A function that calls itself.,function call untill reach base case,5
A function that calls itself.,function call base case meet,5
A function that calls itself.,recursive function only know how solve base case recursive function call directly indirectly base case reach,5
A function that calls itself.,function call itself usually use split problem several small problem type,5
A function that calls itself.,function call itself order solve problem,5
A function that calls itself.,recursive function function execution call base case reach,5
A function that calls itself.,function call find simple form solution base case,5
A function that calls itself.,recursive function function break down large problem two small problem call solve small problem base case terminate point reach base case definite answer call function no longer recur unwinds back function call determine answer original large problem,5
A function that calls itself.,base case call upon problem become small terminates,2.5
A function that calls itself.,recursive function typically simplify problem call itself arrive base case recursively return solution,5
A function that calls itself.,function call definition code,5
A function that calls itself.,function call base case meet,5
A function that calls itself.,function call itself eaach call get close close base case,5
A function that calls itself.,function call self till base case meet,5
A function that calls itself.,function call on us base case stop recursion,5
A function that calls itself.,recursive function function call itself usually call base case base case not correct cause infinite loop,5
A function that calls itself.,function call perform certain task,5
A function that calls itself.,function divide conquers problem base case eventually reach function call base case satisfy,5
A function that calls itself.,function call upon self solve problem time call upon self split up problem simplier form reach base case simple form problem,5
A function that calls itself.,function call loop base case loop exit,2.5
A function that calls itself.,recursive function solves problem repeatedly call itself initial problem broken successively small part much simple base case reach solution piece problem return step time,5
A function that calls itself.,function call itself time do must get small eventually must converge base case otherwise start infinite loop,5
A function that calls itself.,not answer,0
A function that calls itself.,recursive function function call repeatedly base case achieve fundamental idea break one large problem series small similar problem,5
A function that calls itself.,function call itself function call problem diminish,5
A function that calls itself.,invoke ana again unless reach ba case,4
A function that calls itself.,function call perform opperation factorial recursive function,5
A function that calls itself.,function solve problem divide problem small problem call self again base case reach,5
A location in memory that can store a value.,location computer s memory store use program,5
A location in memory that can store a value.,location memory data store retrieve,5
A location in memory that can store a value.,variable location memory value store,5
A location in memory that can store a value.,identifier hold location memory,3
A location in memory that can store a value.,pointer location memory,3
A location in memory that can store a value.,placeholder hold information use program example int hold 1 2 3 4 68 72 256 etc float hold 1 54 55 55 1 24 5 657 8 8123 et char hold a b c d e f 4 5 6 p etc,4
A location in memory that can store a value.,variable location computer s memory value store later retrieve value,5
A location in memory that can store a value.,location memory value store,5
A location in memory that can store a value.,variable integer string program,1
A location in memory that can store a value.,variable object data store,2
A location in memory that can store a value.,variable memory address specific type store data mathematical perspective symbol represent fix definition change value,5
A location in memory that can store a value.,variable location computer s memory value store use program variable name value type size,5
A location in memory that can store a value.,value word assume set value,3
A location in memory that can store a value.,method identifier say use bind data object memory location store location access manipulate later variable name call,5
A location in memory that can store a value.,variable location computer memory value store use program,5
A location in memory that can store a value.,location memory value store,5
A location in memory that can store a value.,variable value subject change computer s memory use program program change value variable recall later act on directly,5
A location in memory that can store a value.,variable location computer memory value store use program,5
A location in memory that can store a value.,sybol name value number example a_used_number stand give number programmer refer number use variable name,3
A location in memory that can store a value.,symbol stand value not change depend on program,3
A location in memory that can store a value.,variable location computer s memory value store use program,5
A location in memory that can store a value.,location memory value store,5
A location in memory that can store a value.,store value use program,4
A location in memory that can store a value.,way store different value program number word letter etc,4
A location in memory that can store a value.,object location memory value store,2
A location in memory that can store a value.,location memory value store,5
A location in memory that can store a value.,program structure hold data uniquely name programmer hold data assign new value assign program finish,4
A location in memory that can store a value.,name object hold numerical letter value,2
A location in memory that can store a value.,block memory hold specific type data,5
A node that has no children.,tree node no child,5
A node that has no children.,leaf child parent node no child nodes own,5
A node that has no children.,endpoint on tree contain no pointer pointer set null,4
A node that has no children.,last child on branch,4
A node that has no children.,leaf node no child,5
A node that has no children.,leaf node no child,5
A node that has no children.,node no child,5
A node that has no children.,leaf node child terminate node,0
A node that has no children.,node no child,5
A node that has no children.,end point tree node not child,5
A node that has no children.,node degree 0,3
A node that has no children.,new item tree a child,2
A node that has no children.,node degree 0 last node tree further away root,3
A node that has no children.,element tree no child,5
A node that has no children.,leaf node no child node,5
A node that has no children.,node degree 0,3
A node that has no children.,leaf node no child,5
A node that has no children.,last value tree value no child attatched,5
A node that has no children.,element bottom invert tree that be no element below them call leaf,5
A tree for which the maximum number of children per node is two.,binary tree special type tree node only maximum 2 child,5
A tree for which the maximum number of children per node is two.,binary tree tree data structure node two child,5
A tree for which the maximum number of children per node is two.,binary tree set node either empty partition root node one two subset binary subtrees root node no two child right leave child,5
A tree for which the maximum number of children per node is two.,tree node 2 child,5
A tree for which the maximum number of children per node is two.,tree only 2 joint leave right,4
A tree for which the maximum number of children per node is two.,set zero node partition root node two possibly empty set binary tree thus node binary tree two child leave child right child,5
A tree for which the maximum number of children per node is two.,list number order compare how compare number already add tree,1
A tree for which the maximum number of children per node is two.,binary search tree tree also condition node maximum 2 child,4
A tree for which the maximum number of children per node is two.,tree element contain two pointer,5
A tree for which the maximum number of children per node is two.,tree maximum 2 child per node,5
A tree for which the maximum number of children per node is two.,binary tree special type invert tree element only two branch below it,4
A tree for which the maximum number of children per node is two.,binary tree special search tree node either 2 1 0 child,4
A tree for which the maximum number of children per node is two.,tree parent maximum 2 child,5
A tree for which the maximum number of children per node is two.,binary tree tree node maximum two degree only two child each,5
A tree for which the maximum number of children per node is two.,tree node 2 child,5
A tree for which the maximum number of children per node is two.,tree data structure do two child typical call left right node right node usually great leave node parent node,4
A tree for which the maximum number of children per node is two.,binary tree set node either empty partition root node one two subset binary subtrees root node two child leave child right child,5
A tree for which the maximum number of children per node is two.,start root node branch off one two subset binary subtrees root node two child leave child right child,5
A tree for which the maximum number of children per node is two.,tree parent max two child,5
A tree for which the maximum number of children per node is two.,tree every parent only two child,4
A tree for which the maximum number of children per node is two.,tree every node no two child,5
A tree for which the maximum number of children per node is two.,binary tree only two child node,5
A tree for which the maximum number of children per node is two.,tree up two child right subtree and or leave subtree,5
A tree for which the maximum number of children per node is two.,set node either empty partition root node one two subset binary subtrees root node two child leave child right child,5
A variable that contains the address in memory of another variable.,name represent actual location value data type int bptr point integer value,5
A variable that contains the address in memory of another variable.,reference call place memory object store,4
A variable that contains the address in memory of another variable.,variable memory address value,5
A variable that contains the address in memory of another variable.,pointer hold memory location,5
A variable that contains the address in memory of another variable.,type point something else memory address something else,5
A variable that contains the address in memory of another variable.,pointer variable contains memory address value,5
A variable that contains the address in memory of another variable.,pointer variable store address another variable,5
A variable that contains the address in memory of another variable.,location memory contain memory address another location memory contain information,5
A variable that contains the address in memory of another variable.,pointer variable contains memory address variable value,5
A variable that contains the address in memory of another variable.,variable store address another variable,5
A variable that contains the address in memory of another variable.,variable contains address another variable,5
A variable that contains the address in memory of another variable.,pointer variable contains memory address anther variable,5
A variable that contains the address in memory of another variable.,variable contain not only value memory address associate it move along string array jump up one memory address,2
A variable that contains the address in memory of another variable.,variable point memory address another variable type specific,5
A variable that contains the address in memory of another variable.,data type whose value refer another value store elsewhere computer memory use address,4
A variable that contains the address in memory of another variable.,like variable however instead hold data hold location memory,4
A variable that contains the address in memory of another variable.,pointer variable contain value memory address variable,5
A variable that contains the address in memory of another variable.,pointer variable contains number memory address value null 0 address value store memory,5
A variable that contains the address in memory of another variable.,pointer program language data type whose value refer directly or point to another value store elsewhere computer memory use address,5
A variable that contains the address in memory of another variable.,data type whose value refer another value store somewhere else computer memory use address,5
A variable that contains the address in memory of another variable.,contains variable s memory address value,5
A variable that contains the address in memory of another variable.,pointer reference location memory,5
A variable that contains the address in memory of another variable.,pointer reference memory location object,4
A variable that contains the address in memory of another variable.,element reference memory cell,5
A variable that contains the address in memory of another variable.,pointer way get another object essentially way grab instance object either pas instance message retreive data object pointer actually address instance hold memory,4
A variable that contains the address in memory of another variable.,variable contains memory address another variable contains specific value,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour traversal tree function iteratively keep track pointer on node,1.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traverse tree size visit node three time on order 3n o n run time,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour traversal tree begin root visit node tree leave bottom right side,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",visit parent vistit child,0
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",tree show how function contain parent child sibling ancestor descendent use tree type algorithm also alternative sort algorithm,0
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",preorder order postorder tree preorder put parent node front child node s order put parent node leave child right child node s postorder put parent node after child node s,2.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour traverse tree rubber band style shape,3.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour visit every node tree start root work around tree counterclockwise in order post order pre order traversal see variation euler tour traversal,4
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",travel outside edge tree clockwise naming node,4.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",start root travel leave visit ever child along way till return root right,4
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler traveral go tree look node put order leave root right like inorder traversal,2.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",start root circle around _whole_ tree name node see it,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traverse tree down terminal child sibling traverse up terminal child s parent sibling repeat first step sibling child root node visit,4
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",visit order accord data value,2.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",go bottom leave sub tree visit parent child,2
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",child root,0
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler traversal tree rubber band style shape,3.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour way traverse tree come contact node three time leave right bottom,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",not answer,0
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour traversal tree traverse down branch straight one leaf start root repeat element traverse,4
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",travel root farthest leave child backup travel leftmost child right side repeat reach rightmost child,3.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",start node on left root proceeds visit node leave right order visit root proceeds repeat previous step on right side tree,2.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler tour traversal tree specific way navigating tree involves follow tree start top move along left side tree first cup visit parent child node allow node visit leave right bottom euler tour first progress leave child one progress parent next child parent s parent,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",recursively visit every node on list visit node leave bottom right,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traverse tree level level,0
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",run parent child order,2.5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traverse go down leave go right last child back top kind like go around tree,5
"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",euler traversal traversal begin root travel around outside tree element tree visit 3 time leave bottom right,5
Abstraction and reusability.,exist class reuse program maintenance verification easy,3
Abstraction and reusability.,advantage oop allow u build class object three principle make up oop be encapsulation object combine data operation inheritance class inherit property class polymorphism object determine appropriate operation execution time,2
Abstraction and reusability.,exist class reuse program maintenance verification easy,3
Abstraction and reusability.,variable remain private code easily modify reusable well easily implement not mention easy read follow along observer,4
Abstraction and reusability.,encapsulation object use operation without know how operation work inheritance cut redundancy reuse early class polymorphism object select correct operation use situation,5
Abstraction and reusability.,one main advantage hide inner detail technique know encapsulation object combine data operation cannot see how work another advantage reuse class define earlier program method know inheritance finally another advantage object determine appropriate operation execution time technique know polymorphism,5
Abstraction and reusability.,modularability ability reuse part program later another program sometimes completely different goal program also make easy debug code divide up code class specific job program fail one job only one class debug good security purpose allow let someone use program sort list without give access source code also allow use inheritance polymorphism,4
Abstraction and reusability.,1 exist class reuse 2 program maintenance verification easy,3
Abstraction and reusability.,main advantage object orient program data abstraction easy maintenance re usability,5
Abstraction and reusability.,re usability ease maintenance,3
Abstraction and reusability.,information hidden easy debug program easier manageable,3
Abstraction and reusability.,exist class feused program maintenance verification easy,3
Abstraction and reusability.,data abstraction control possible isolate element element lot easy prevent tamper data,3
Abstraction and reusability.,cod debug program usually easier either compiler specify object work incorrectly function object assign easy identify code also look organize easy read help avoid redundant cod post programming maintenance also easier also modules reuse several time program without much hassle abstraction art break down one big problem small simpler problem solve them many small problem share unique complex problem create module solve small repeat problem save time encounter again,5
Abstraction and reusability.,use different module allow easy debug,2
Abstraction and reusability.,advantage exist class reuse program maintenance verification easy accomplish,3
Abstraction and reusability.,main advantage object orient program exist class reuse program maintenance verification easy,3
Abstraction and reusability.,well one encapsulation value variable inside object private unless method write pass info outside object well inheritance subclass inherits variable method super class example book include obj clock how obj alarm still use clock first class,3
Abstraction and reusability.,easy debugg br reusability,3
Abstraction and reusability.,exist class reuse program maintenance verification easy,3
Abstraction and reusability.,data encapsulation concept the use function method manipulate data,3
Abstraction and reusability.,modular reusable code allow faster deployment solution general view solution,5
Abstraction and reusability.,make easy reuse adapt previously write code separate complex program small easy understand class,5
Abstraction and reusability.,encapsulation object combine data operation inheritance class inherit property class polymorphism object determine appropriate operation execution time,2
Abstraction and reusability.,exist class reuse program maintenance verification easy,3
Abstraction and reusability.,reusable component extensibility maintainability reduce large problem small manageable problem,4
Abstraction and reusability.,type program flexible make easy add modify program also type fail safe program check individual module eliminate redundant code make program easy read programmer debug program easy track down source problem within module rather 2 million line program,5
Abstraction and reusability.,exist class reuse program maintenance verification easy,3
Abstraction and reusability.,object orient program allows programmer use object class change manipulate not affect entire object once class hold attrubutes affect object,1
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",ability backtrack list,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",traverse list forward backwards,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",double link list require space per node elementary operation expensive often easy manipulate allow sequential access list direction,4
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",move forward backwards double link list basic only move forward,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",primary disadvantage doubly link list 1 node require extra pointer require space 2 insertion deletion node take bit longer more pointer operation,0
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",traverse forward backwards node,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",traverse direction,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list allow traverse list either direction node point successor well predecessor,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",node point predecessor successor,4
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list pointer direction allow access back front well front back,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list delete node without traverse list,5
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",double pointer node point forward backwards make little easer get need,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list traverse either direction normal link list only traverse start finish,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",give faster time operation insertion deletion,5
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",traverse list reverse,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",point forward backwards,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",go backwards link list access previous data easier without keep track previous item,4
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list allow delete node without traverse list establish trailing pointer,5
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",traverse list front back back front,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list traverse direction,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",give node list one navigate easily either direction,4
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list allow backward movement node,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",advantage node point bothe predecessor successor no special case insertion deletion,4
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list traverse backwards though still cannot access data point list short traverse backwards,3
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",double link list often easy manipulate allow sequential access list direction,4
"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",doubly link list allow back up node rather go entire list,4
"All the dimensions, except the first one.",none pas array name,1
"All the dimensions, except the first one.",depend parameter pass multidimensional multideminsional two dimension,2
"All the dimensions, except the first one.",them,2
"All the dimensions, except the first one.",one,1
"All the dimensions, except the first one.",every dimension after first,5
"All the dimensions, except the first one.",multi dimensional array access use 1 index one dimension least,2
"All the dimensions, except the first one.",subsequent dimension after first one,5
"All the dimensions, except the first one.",first one least,1
"All the dimensions, except the first one.",pass multi dimensional array dimension must specify except first dimension,5
"All the dimensions, except the first one.",,2
"All the dimensions, except the first one.",dimension first,5
"All the dimensions, except the first one.",1 less total number dimension,4
"All the dimensions, except the first one.",pass in main multidimensional array function no dimension need specify,1
"All the dimensions, except the first one.",subsequent dimension after first dimension first not need specify,5
"All the dimensions, except the first one.",first dimension not require however subsequent dimension s need compiler,5
"All the dimensions, except the first one.",first,5
"All the dimensions, except the first one.",least 2 always equal number dimension argument expect like blah require 4 dimensional array input blah require 3 dimensional array blah require 2 dimensional array,1
"All the dimensions, except the first one.",least 2 depend on how many array use,1
"All the dimensions, except the first one.",many dimension commonly row column,2
"All the dimensions, except the first one.",size subsequent dimension require compiler must know how many element skip move second element first dimension,4
"All the dimensions, except the first one.",two paramaters array how many columns array a 3,4
"All the dimensions, except the first one.",two,1
"All the dimensions, except the first one.",not answer,0
"All the dimensions, except the first one.",dimension must specify,2
"All the dimensions, except the first one.",one less number dimension array contains,4
"All the dimensions, except the first one.",size first dimension not need specify dimension do,5
"All the dimensions, except the first one.",dimension exclude first one,5
"All the dimensions, except the first one.",first need specified size rest need only state first like 3,1
"All the dimensions, except the first one.",dimension except first one need specify pass array function compiler need know how many memory address skip make back 2nd element first dimension size first dimension not need specify,5
"All the dimensions, except the first one.",size first dimension omit regular array however every dimension outside first size dimension must specify passed example multi dimensional array 2 4 6 name multiarray pass a multiarray 4 6 2,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return value,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,dereferences pointer mean return value store memory address pointer refers to,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return information address pointer point to,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return synonym object operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return zero many character place before operator,1
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return synonym object operand point to,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,unary operator return value variable locate address,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,star operator return value memory address pointer point at,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,operator return dereferenced pointer variable ie return value whatever variable pointer point to,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return alias nickname object pointer operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,star operator return object memory location,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,value object operand point,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,value store object point to,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,dereferencing operator return dereferenced object,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,star operator return synonym object pointer operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return actual data address point,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,operator return value memory address element point to,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return synonym object operand point to,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,synonym object pointer operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,reference variable,1
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,value variable pointer point to,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,synonym object operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,operator return value object s memory address precedes,4
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return synonym object pointer operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return synonym object operand point,5
An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,return synonym alias nickname name object operand point memory dereferencing pointer,5
At the main function.,function â int main â â,5
At the main function.,main function,5
At the main function.,beg excute main,5
At the main function.,function main,5
At the main function.,c program begin execution main function,5
At the main function.,main function,5
At the main function.,main function,5
At the main function.,main,5
At the main function.,main,5
At the main function.,within main function,5
At the main function.,main function,5
At the main function.,after load require include statement library main method begin execution,5
At the main function.,root,0
At the main function.,c program begin execution main,5
At the main function.,function main,5
At the main function.,test phase,0
At the main function.,main function,5
At the main function.,main function int main,5
At the main function.,main method,5
At the main function.,c program begin execute main function,5
At the main function.,main function,5
At the main function.,begin main function,5
At the main function.,main method,5
At the main function.,main function,5
At the main function.,begin execute funcion main,5
At the main function.,c program begin execute main method,5
At the main function.,int main,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",examines name type order argument on function,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",type initilized int char etc,2
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",base on number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",creates set candidate function set viable function,3
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function distinguish signature name mangle name decoration type safe linkage ensure proper overload function call type argument conform tpes parameter,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",function signature,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",differentiate compiler condition input use one overloaded function,4
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",name different parameter,3
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overload function simply invovles haing method name within class use implement method subclass override word replaces implementation super class overload concept provide different mean object base on context presence overload one type polymorphism also feature program,1
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",function signature,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",not answer,0
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",differntiated number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",number type order parameter,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",compiler distinguishes overload function signature encodes function identifier number type parameter generate type safe linkage ensure proper overload function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",compiler selects right function execute number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function differentiate parameter,4
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",compiler selects proper function execute base on number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",number type order argument,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",paremeters,4
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",compiler differentiates overload function signature,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",return type different input parameter,1
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",signature return type argument list,3
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",number type argument,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function must return type different input parameter,1
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",selects proper function execute base on number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",unique function signature,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",number type parameter,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",compiler selects proper function execute base on number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",compiler selects proper function execute base on number type order argument function call,5
"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",look number type order argument function call,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",f 3,2
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",pointer array initially point first element array pointer incremented point next element on,2
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",use pointer element index,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",pointer front array add memory location or offset initial value,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",int x 10 int xptr xptr x address x 1 xptr 1,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",b 3 bptr 3,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",get memory location first element add offset get element,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",reference pointer refer pointer relative first pointer pointer 1 pointer 2 etc,2
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",array sign pointer element array assign pointer,2
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",use either name array pointer use separate pointer point array,3
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",element b 3 reference use bptr 3 instead,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",multi dimensional array,0
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",take number array elements point time,1
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",element b n access bptr n,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",element b n access bptr n example how array address pointer offset notation,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",b3 bptr 3 array treat pointer,4
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",array element,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",yes array offset,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",a i a i,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",element a n access aptr n,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",use star operator array b n access bpointer n,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",name array consider pointer c pass function parameter declare int a 10 creates pointer a store address a 0,3
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",array address pointer offset notation set pointer variable equal variable name array element array access add offset value pointer variable,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",arrayname index,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",first pointer variable must reference first entity array variable array access refer first entity s address plus offset i e ptrtoarray array nthentity ptrtoarray n,5
"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",array act pointer reference pointer arrayptr 3 array 3,5
By reference.,pass head pointer go list need inside function,5
By reference.,pas by reference,5
by reference.,specify array name without bracket array size normally pass another argument function process specific number element array array pass reference individual array element pass value function take array argument,5
By reference.,pass pointer link list object,2
By reference.,link list object contain head element accessible,4
By reference.,link list pass reference specificly head pointer,5
by reference.,reference,5
by reference.,way declaration actual function,3
by reference.,reference default unless specify const later make array unmodifiable,5
by reference.,reference,5
By reference.,refrenece,5
By reference.,link list permit insertion removal node point list constant time 1 not allow random access,0
by reference.,1st must specify array name without bracket array name size pass two argument function call,4
by reference.,function recieves array array size parameter function arrayname arraysize,4
by reference.,specify array name without bracket,3
by reference.,pas name array function for int bin 10 pas array like so jingle bin jingle must declare correctly order receive array either prototype void jingle int definition initialization void jingle int array also worth note array pass function reference not copy large array burn memory give function complete control array however,5
By reference.,pas head pointer function reference argument,5
by reference.,call function function must loop array get set character,1
By reference.,method access link list s head pointer access entire list,5
by reference.,two part array itself size function pass avoid bound error,4
by reference.,array pass reference pass start address array programmer specifies array name without bracket pass array size another argument function process specific number element array,5
by reference.,must pass array size function ex function array size,4
By reference.,function access link list s head pointer access entire list pas head ponter function reference argument,5
by reference.,pas pointer first item also pass size,4
By reference.,pas head pointer function since access entire list,5
By reference.,head object pass function,4
By reference.,link list pass use pointer,3
by reference.,array pass function reference,5
By reference.,not answer,0
By reference.,pointer node,3
By reference.,link list pass argument function pass head pointer list reference,5
by reference.,refrence,5
by reference.,reference pointer element array,4
By reference.,function access link list s head pointer access entire list pas head pointer function reference argument,5
By reference.,pass reference want function change pointer,4
By reference.,pas head pointer function reference argument,5
By reference.,pointer first element pass function,5
by reference.,array pass reference,5
by reference.,function int int length,4
by reference.,usually way pas anything else not specify length char array pas function send name array example char str 20 ispalindrome str send char array function ispalindrome otherwise need send length array well,3
By reference.,use node,2
by reference.,function read variable store them return ever variable read function print content array,1
By reference.,head pointer pass function reference argument,5
By reference.,send pointer object linkedlist class,2
by reference.,reference only,5
By reference.,pass pointer head,5
by reference.,specify array name pass reference argument function,5
By reference.,pass head pointer link list function give function access node link list,5
By reference.,head list take head address traverse on in,5
By using constructors.,object usually initialized begin program initialize usually main function initialize after class s name,1
By using constructors.,variable set give value 0 none give,1
By using constructors.,initialize constructor,5
By using constructors.,initialize 0,1
By using constructors.,object initialize essentially copy correspond class complete separate variable,2
By using constructors.,object initialize give object type name initial value,1
By using constructors.,constructor default not provide user programmer specify constructor,5
By using constructors.,classname objectname input parameter,3
By using constructors.,value specify after declaration initialize anywhere declaration correspond,1
By using constructors.,initialize use name class,1
By using constructors.,initialize value dependent on compiler,1
By using constructors.,objectname classname call function class objectname funciton,0
By using constructors.,class call constructor,2
By using constructors.,not answer,0
By using constructors.,give value,2
By using constructors.,initialize dot constructor object create,0
By using constructors.,ie gradebook mygradebook call upon class give name like show,0
By using constructors.,object refers class constructor s initialize object base on return type parameter pass compiler auto create one one not provide,5
By using constructors.,object assign space memory create name give object point memory address object data resides,1
By using constructors.,class gradebook initialize main function use constructor gradebook class no constructor specify find c use default one no parameter gradebook mygradebook bit code class gradebook initialize object mygradebook,5
By using constructors.,obj initialized variable call them create within class e i classname objectname etc,1
By using constructors.,initialize name instance template form class name instance modify different class create from,3
By using constructors.,default constructor object class no constructor specify us default system constructor,4
By using constructors.,object initialize constructor call whether one provide c assigns default constructor,5
By using constructors.,lt variable type gt lt variable name gt or want initialize variable certain value lt variable type gt lt variable name gt lt value gt,1
By using constructors.,declare class first name variable variable need put constructor ex class myclass x y,5
By using constructors.,object initialize state classname first assign name object within object s place initialize,3
By using constructors.,memory allocate accordance type initialization input,1
By using constructors.,object initialize value give object define certain task,2
By using constructors.,use constructor,5
Data members (attributes) and member functions.,data function,5
Data members (attributes) and member functions.,data member member function,5
Data members (attributes) and member functions.,begin class follow class name usually constructor data member member function delineate class include class s definition,5
Data members (attributes) and member functions.,data member member function,5
Data members (attributes) and member functions.,member function,3
Data members (attributes) and member functions.,function data member belong class,5
Data members (attributes) and member functions.,attribute say class also whether not subclass also whether public private protect,4
Data members (attributes) and member functions.,class expand concept data structure hold data function execute,5
Data members (attributes) and member functions.,constructor several data member least one public data member method,4
Data members (attributes) and member functions.,class name two curly prenthesis public private,1
Data members (attributes) and member functions.,specific class name include only information define class implementation detail etc,2
Data members (attributes) and member functions.,class variable function definition class,5
Data members (attributes) and member functions.,class definition usually contain function data member,5
Data members (attributes) and member functions.,class name public data type constructor method function,2
Data members (attributes) and member functions.,public section private section must semicolon set end,1
Data members (attributes) and member functions.,member function data member,5
Data members (attributes) and member functions.,keyword class follow class name on inside declare public private declaration class,3
Data members (attributes) and member functions.,data member member function,5
Data members (attributes) and member functions.,u usually set get displaymessge message tell property class not reveal implementation anything want class definition,1
Data members (attributes) and member functions.,object data,1
Data members (attributes) and member functions.,member function data member belong class,5
Data members (attributes) and member functions.,since class user define body declaration contain member either data function declaration optionally access specifier example specifier public private protect keyword class class body enclose bracket,5
Data members (attributes) and member functions.,public private area include function variable use class,5
Data members (attributes) and member functions.,member funtions data member,5
Data members (attributes) and member functions.,class definition typically include function definition,3
Data members (attributes) and member functions.,data member member function,5
Data members (attributes) and member functions.,constructor function variable accessible class possibly class depend on how do,5
Data members (attributes) and member functions.,data method,5
Data members (attributes) and member functions.,information tell compiler data member member function belong class,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable access inside member function only data member access throughout class,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable cannot use outside function body function terminate value local variable lose data member variable class definition exist throughout life object,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,variable inside member function only access inside member data member accessed throughought program,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member general term describe object instantiate within member function local local variable refers scope variable locate anything control structure class local variable whose scope member function data member member function,0
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member data component particular class member function function component class,1
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,every member function access modify data member local variable only use line declaration next closing before lose memory,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member variable declare inside class definition outside body class member function local variable only use within function declaration,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member declare inside class outside member function unlike local variable object class keep copy data member store memory,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable only useable within function define whereas data member available method within class,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member declare class definition outside body class s member function definition local variable declare function definition s body,3
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member local variable declare function definitionâ s body cannot use outside function body function terminate value local variable lose,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member globally accessible local variable only accessible inside member function,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member part c class structure store data certain type local variable inside member function only available inside function use derive desire outcome,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member access outside class whereas local variable cannot,3
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member permanent attribute class local variable inside member function lose scope member function end,3
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member accessible anywhere class local variable member function only accessible particular function freed after function exit,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable use only within scope declaration,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable member function static data member change value freely,0
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable only access within scope declaration,3
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,field variable variable declare member class local variable avariable isdeclared local method,1
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member atributes function use outside function local variable not use outside function value lose after function terminates,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,variable declare function defination s body cannot use outside function data member accessible only member function class,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member exist permanently program s memory long run local variable inside member function temporal only used operate function exist long function run,2
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable lose exit block code data member not,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member variable represent attribute class definition local variable declare function body cannot use outside function body function terminate value local variable lose,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable only use within function data member set public access use throughout,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member encapsulate within class object static share instance class however local variable s only use function block declare not whole class wise call global variable,3
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable only available function,4
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable cannot access outside function declare data member normally private variable function declare private accessible only member function class declare,5
Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data member accessible function class local variable only available member function value lose function close,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",example array on n element divide conquer split up array equal half repeat process element,3
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide element recur conquer work merge sort quicksort,3
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",take large problem split simple small problem,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide large problem small incident problem solve small incident,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide and conquer refers abstraction act separate large complex problem small easy problem solve relatively simple algorithm,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",problem big split small problem type solve those solution small problem give solution large original problem,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide conquer mean break problem two small problem solve those put two solution together,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",take large problem split two easy fast solution make good readability,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide one large string line value sepereate smallers line easily manipulate replace order be,2
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",show use cpp header file split program up small subsection individual code become easy write keep up opposed code one file,1
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide problem singular unit work on problem piece piece problem solve,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide array half sort half sort back one array,3
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",small part easier compare compare whole divide problem down half easily compare work backwards put back together give solution,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",idea split problem half solve small split problem,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",split problem small manageable part proceed address small problem,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",break up large data structure small sub unit easier manipulate,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",idea divide conquer take large problem split n small problem make program easy read modify,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide coquer mean divide problem 2 problem solve merge back together final solution whole problem,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide conquer paradigm divide problem small small portion easier solve,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide big problem small problem solve small problem join small solve element problem two ore element array divide array part compare element after comperison conquer element array n element first half n 2 element,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",separate large program small class target reach,1.5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide and conquer technique take sort algorithm break up array small element array tackle problem run algorithm,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",take class break down everything suppose easily manage function,1
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",dive conquer break up large complex program small easy solve component,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide conquer paradigm split large problem simpler problem point solves simpler problem merge simple solution together answer large problem,5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",take problem divide small problem solve small problem divide small problem solve it thus solve whole problem process,4.5
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide conquer divide program half multiple time extent program whole easy work group solve problem,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide and conquer paradigm take data divide two part work on part indiviually item find,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide and conquer paradigm divide problem two piece work on piece separately allow faster approach 2 separate small problem,4
"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",divide conquer paradigm recursive solution keep divide problem halve base case reach,4
enqueue and dequeue,enqueue dequeue,5
enqueue and dequeue,enque data deque,5
enqueue and dequeue,dequeue enqueue,5
enqueue and dequeue,enqueue dequeue add remove element queue,5
enqueue and dequeue,enqueue dequeue,5
enqueue and dequeue,enqueue add item queue dequeue take first item queue,5
enqueue and dequeue,two function be enqueue dequeue,5
enqueue and dequeue,enqueue dequeue,5
enqueue and dequeue,enqueue insert specify element head specify queue dequeue remove specify element queue,5
enqueue and dequeue,two main function enqueue dequeue,5
enqueue and dequeue,two main function enqueue insert item back queue dequeue remove item front queue,5
enqueue and dequeue,remove item add first add item back,5
enqueue and dequeue,enqueue dequeue,5
enqueue and dequeue,enqueue insert queue dequeue remove element,5
enqueue and dequeue,enqueue add data queue dequeue delete data queue,5
enqueue and dequeue,enqueue dequeue,5
enqueue and dequeue,rear front,2
enqueue and dequeue,two main function queue enqueue dequeue,5
Extra space required to store the back pointers.,node require extra pointer space requirement increase insertion deletion node take longer more pointer operation,5
Extra space required to store the back pointers.,process add remove node doubly link list complex basic link list,3
Extra space required to store the back pointers.,insert delete double link list involve special case begin end,3
Extra space required to store the back pointers.,increase memory requirement slightly complicate modify element list,5
Extra space required to store the back pointers.,node require extra node require memory difficult insert remove individual node,5
Extra space required to store the back pointers.,take up twice much memory node,5
Extra space required to store the back pointers.,little confuse special case end begin become difficult do,3
Extra space required to store the back pointers.,double link list require space per node elementary operation expensive,5
Extra space required to store the back pointers.,need memory store previous pointer,5
Extra space required to store the back pointers.,doubly link list pointer set mechanic insert delete difficult also special case begin end list complicate,4
Extra space required to store the back pointers.,node take up memory,5
Extra space required to store the back pointers.,pointer set mechanic insert delete doubly link list bit involved singly link list,4
Extra space required to store the back pointers.,difficult delete create node,3
Extra space required to store the back pointers.,insertion deletion doubly link list involve singly link list leave room error complex algorithm,3
Extra space required to store the back pointers.,not answer,0
Extra space required to store the back pointers.,take up twice storage need,5
Extra space required to store the back pointers.,node doubly link list take up memory node singly link list,5
Extra space required to store the back pointers.,double link list require space per node elementary operation expensive,5
Extra space required to store the back pointers.,doubly link list twice many pointer element therefore memory use,5
Extra space required to store the back pointers.,increased action add remove element link list,3
Extra space required to store the back pointers.,main disadvanate hard remove item list,1
Extra space required to store the back pointers.,keep up consider predecessor successor connection insert delete,3
Extra space required to store the back pointers.,1 node require extra pointer require space 2 insertion deletion node take bit longer pointer operation,5
Extra space required to store the back pointers.,use pointer enable backward movement take up memory pointer make slightly work add remove node list,5
Extra space required to store the back pointers.,use memory make 2 pointer update 2 pointer time change list,5
Extra space required to store the back pointers.,node require extra pointer take up storage insertion deletion require pointer operation,5
File scope.,function follow deceleration source code file allow access variable also global scope variable retrain value throughout execution program,5
File scope.,accesed class object variable class,1
File scope.,global variable file scope variable know function throught file,5
File scope.,file scope,5
File scope.,accessed c file anywhere,0
File scope.,global variable file scope,5
File scope.,variable declare global function class use variable,4
File scope.,global variable program scope accessible anywhere program,4
File scope.,throught programm,4
File scope.,entire program,4
File scope.,global variable identifier retain value throughout execution program file scope,5
File scope.,global variable use function long appropriate h file hold variable include,3
File scope.,use throughout program,4
File scope.,global variable file scope,5
File scope.,global variable file scope,5
File scope.,entire program file,5
File scope.,file scope,5
File scope.,variable exist throught entire script value change anytime code fucntions,4
File scope.,scope global variable file level,5
File scope.,variable accessible anywhere program long public,4
File scope.,globally anywhere program,4
File scope.,whole code,4
File scope.,accessed part program reference function follow declaration definition source file,5
File scope.,accessible function within program,4
File scope.,reference function follow declaration definition source file,5
File scope.,global variable b access class wit object variable class,1
File scope.,file scope place outside function,5
File scope.,entire program,4
File scope.,scope global variable create place variable declaration outside class function definition global variable retain value throughout execution program reference function follow declaration definition source file,0
File scope.,throughout execution program,4
File scope.,reference function follow declaration definition inside source file,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",deletion node depend upon child avl binary search tree assume not avl tree node delete no child set pointer null leave child right child exclusively child replaces delete node two child leave child right sub tree or right child leave subtree will replace,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",traverse tree find node node no child simply delete it otherwise set node s data equal data one child set pointer child null,3
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",replace node large element leave subtree replace small element right subtree,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",link to be delete s leave child to be delete s parent s leave child pointer,3.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",node leaf simply deallocated deleted memory parent s reference change null node single child pointer make point child before delete node node two child easy solution copy node s entire subtree new array tree delete node descendant add element take subtree back main tree,4
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",cannot delete node cause node 2 child,0
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",pointer child delete 2 child set node child delete it node th middle take place,2
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",no child delete it only one child replace node whichever child have child replace one child send child down along side new node,3.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",binary search tree must first establish proper replacement node delete usually child soon deleted node replacement node find simply reassign node go delete be after deleted node usurp remove deleted node memory use again,4
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",first attach element node delete alternate node delete node delete node,3
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",traverse tree till find node want delete node no child delete it node child before delete find left most child attach root delete node,3.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",node no child delete right away otherwise put either furthest right node on left side furthest leave node on right side place perform above on node guarantee child get handle properly,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",must first traverse tree find appropriate value must make sure node leaf node be delete pointer specific node,1.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",must delete information node contain to free up memory garbage collect also delete pointer in node s parent point node wish delete,0.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",root set root null else delete right leaf set rightptr parent node null else delete leave leaf set leftptr parent node null else delete leave right subtree child node set max leaf child leave subtree new child node,4.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",search down tree find node replace link node great child node on left subtree least child node on right subtree,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node tree link node parent child node,2.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",search tree node use recursion find node determine whether leaf internal node leaf delete set parent pointer node null node replace node either child node,3.5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",node leaf set parent s pointer null node tree must replace node one tree either large leave tree small right tree do recursively need,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",set node null not point anything use delete opertator clear space memory,0
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node,0
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node link child nodes connect node delete remain node tree way node on right parent node large parent node on left parent node small,3
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",not answer,0
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",remove element tree move next high element leave place,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",create temp node set temp s value node after head null case only head node list set head equal temp delete temp,0
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",node leaf set parent s pointer null delete it single child set parent s pointer child delete two child set node one middle child remove child previous position leaf rightmost child leave subtree leftmost child right subtree,5
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",depends on node locate child delete node inside tree must replace another node work place,3
"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",way delete node binary search tree first take root see node come root delete node set root null,0
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computer convert infix expression postfix form evaluate postfix expression,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert infix expression postfix expression evaluate postfix expression,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expression convert postfix i e 3 2 change 32,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert postfix expression put operation stack,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",first convert postfix expression evaluate,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",postfix format,3
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",first convert equivalent postfix expression read computer,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert postfix,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",write arithmetic expression call infix notation binary operator like write two operand a a b two alternative form notation use certain situation one prefix notation operator write before operand prefix notation sum b write b notation use write function call mathematics computer science also use lisp scheme programming languages postfix notation operator write after operand sum b write a b you see reverse polish notation postfix notation form conceptual basis way arithmetic expression evaluate computer one important characteristic postfix prefix notation unambiguous no parenthesis need indicate order operation,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expression pointer evaluate reference memory location,0
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",operand enter computer push onto stack operator enter computer applies top two operand stack pops operand stack push result operation onto stack,4
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",pass function lead term,0
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computer convert infix expression postfix form before evaluation,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert post fix expression still follow order precedence operator,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expression convert postfix expression before evaluated computer operands stay order operator always follow operand,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",postfix notation,3
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",hard time explain i ll show how infix evaluate instead start infix expression like 5 2 5 400 2 3 push item get happens perform operation reach complete now 7 5 400 2 3 now expression evaluate perform last step again 35 400 2 3 now stack repeat agian 35 400 5 now stack after that repeat 35 80 now stack repeat again 115 now stack return,1
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",use parenthesis order expression,2
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computer cannot evaulate infix expression must first convert infix postfix expression evaluate,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",use parenthisis stack determine evaluation need make first,3
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",transform post fix expression evaluate stack,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",throw variable postfix expression operands onto parenthesis regulate stack end parentheses enough variable operate on encountered,4
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expression interpret postfix expression implement stack,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expression convert postfix form,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computer usually convert infix expression post fix expression evaluate use stack,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computer translate infix expression postfix expression solves,5
"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computer convert infix expression postfix expression push number onto stack pop need,5
Function members and data members.,access specifier function oftentimes constructor,3
Function members and data members.,constructor data member method,5
Function members and data members.,return value accept value,1.5
Function members and data members.,class definition typically include class name class constructor s extra function class variable,5
Function members and data members.,class definition include name class type parameter,1.5
Function members and data members.,class name semicoln end defination private bublic follow,2.5
Function members and data members.,data member function definition,5
Function members and data members.,member function data member,5
Function members and data members.,name class file parameter must take perform function also brief description class do,1.5
Function members and data members.,class name data class definition function method,5
Function members and data members.,input return type element,1.5
Function members and data members.,function data member,5
Function members and data members.,element include class definition access modifier data type variable function signature,4
Function members and data members.,return type input parameter,1.5
Function members and data members.,class user define contains member data function keyword class use include bracket,2.5
Function members and data members.,parameter type class name return type code execute class,2
Function members and data members.,function variable use object defined class,5
Function members and data members.,function member member attribute word class variable function,5
Function members and data members.,constructor function definition,3.5
Function members and data members.,constructor private public variable function prototype,5
Function members and data members.,member function data member,5
Function members and data members.,data member class variable function,5
Function members and data members.,element typically include class definition function prototypes usually declare public data member use class usually declare private,5
Function members and data members.,data variable function data member,5
Function members and data members.,variable function prototype,5
Function members and data members.,class definition include definition class constructor s public private function course also include class header necessary c library,3
Function members and data members.,class variable class function prototype,5
Function members and data members.,public private variable initiation function include class,4.5
Function members and data members.,constructor function variable native class,5
Function members and data members.,data member function function definition variable,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",no constructor specify constructor s class class instantiate program,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",one not explicitly include class,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",dont specify constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",before main function code,0
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",c create default constructor no constructor present,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",not one already specific class,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",compiler create default constructor not define one class file,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",class not explicitly include constructor compiler create one,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",no parameter set default constructor use,3
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",compiler create automatically you unless specifically create one,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",class not explicitly include constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",begin run complier matter fact c generates default constructor class provide no constructor provide user,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",programmer not explicitly include constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",class not explicitly include constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",compilation,2
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",no user define constructor exists,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",non provide,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",class not explicitly include constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",constructor not provide programmer class,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",no argument pass,1
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",no constructor exist one need parameterless default constructor declare,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",class not explicitly include constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",compiler provide one class not explictly include consructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",program compiles,2
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",one not explicitly state,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",c create default constructor compilation one not provide,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",whenevery dont specifiy,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",not provide constructor,5
"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",class not explicitly include constructor,5
"If the recursion step is defined incorrectly, or if the base case is not included.",either omit base case write recursion step incorrectly not converge on base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case incorrectly write recursion step not converge on base case lead infinite recursion,5
"If the recursion step is defined incorrectly, or if the base case is not included.",recursive problem cannot reduce reach base case,4
"If the recursion step is defined incorrectly, or if the base case is not included.",improper handling case not possible value able handle,2
"If the recursion step is defined incorrectly, or if the base case is not included.",not base case build recursion process not converge on base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",not create base case case base case never meet,5
"If the recursion step is defined incorrectly, or if the base case is not included.",lack define base case write recursion step incorrectly not converge on base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case base case never meet,5
"If the recursion step is defined incorrectly, or if the base case is not included.",recursion function never reach successfully defines base case recurse forever happen many way function not progress towards base case function cod poorly not even contain base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",no easily reach base case no base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",incorrect miss base case must reduce base case function must get simple time run converge base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",base case simple case problem function lead it not happen end up infinite loop condition know terminate,5
"If the recursion step is defined incorrectly, or if the base case is not included.",either omit base case write recursion step incorrectly not converge on base case cause infinite recursion,5
"If the recursion step is defined incorrectly, or if the base case is not included.",not proper case leave recursion,3
"If the recursion step is defined incorrectly, or if the base case is not included.",infinite recursion infinite loop condition not meet either omit base case write recursion step incorrectly not converge on base case cause indefinite recursion eventually exhaust memory,5
"If the recursion step is defined incorrectly, or if the base case is not included.",recursive call problem not diminish not diminish base case cause infinite recursion,5
"If the recursion step is defined incorrectly, or if the base case is not included.",either omit base case write recursion step incorrectly not reach base case cause infinite recursion,5
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case single return not include call function again static value end at,2
"If the recursion step is defined incorrectly, or if the base case is not included.",either omit base case write recursion step incorerectly,5
"If the recursion step is defined incorrectly, or if the base case is not included.",recursion refers situation function call themselves types function know recursive function say infinite recursion occur function design way call self forever without stop possible cause,1
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case no change value,4
"If the recursion step is defined incorrectly, or if the base case is not included.",omit base case write recursive call not converge upon base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case programmar not define base case simple case never get reach,5
"If the recursion step is defined incorrectly, or if the base case is not included.",not base case return base value,3
"If the recursion step is defined incorrectly, or if the base case is not included.",infinite recursion occur no base case define call not vary,4
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case recursive call not converge base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",no base case recursion step not reduce problem recursive call,4
"If the recursion step is defined incorrectly, or if the base case is not included.",badly design algorithyms use recursion non recursive problem,2
"If the recursion step is defined incorrectly, or if the base case is not included.",function never allow reach base case,5
"If the recursion step is defined incorrectly, or if the base case is not included.",omit base case incorrectly call recursive step,5
"If the recursion step is defined incorrectly, or if the base case is not included.",infinite recursion occur base case omit recursion step write incorrectly never converge on base case,5
Implement the algorithm and measure the physical running time.,big o h notation,1.5
Implement the algorithm and measure the physical running time.,number time specific segment get call per unit work,3
Implement the algorithm and measure the physical running time.,run program various input data measure running time system time,5
Implement the algorithm and measure the physical running time.,run algorithm on specific set data,5
Implement the algorithm and measure the physical running time.,try different set input measure amount time algorithm actually take,5
Implement the algorithm and measure the physical running time.,keep value how many operation take add value time function call,3
Implement the algorithm and measure the physical running time.,time complexity use big o logarthmic o log n linear o n exponential o n 2 quadratic o n k k gt 1 polynomial o a n n gt 1,1.5
Implement the algorithm and measure the physical running time.,oposite theoretical assessment algorithm determine runtime run code first determine runtime not recommend limited test not include possibility data nor hardware use process data,5
Implement the algorithm and measure the physical running time.,run input various input measure run time system time,5
Implement the algorithm and measure the physical running time.,measure actual time program run calculate run time use input operation do,5
Implement the algorithm and measure the physical running time.,create run algorithm multiple time measure amount time take average result,5
Implement the algorithm and measure the physical running time.,run program different data size like 10 x increase x measure completion speed program find patterns attempt measure run time important keep software hardware however make experimental test inferior theoretical eye most,5
Implement the algorithm and measure the physical running time.,add time marker before algorithm call another time marker immediately after change time calculate efficiency speed computer cpu,3
Implement the algorithm and measure the physical running time.,big oh,1.5
Implement the algorithm and measure the physical running time.,add up number operation perform base on bad case possible,2
Implement the algorithm and measure the physical running time.,experimental approach run algorithm see how long take,5
Implement the algorithm and measure the physical running time.,experimental approach measure running time use big o equation tell run time,1.5
Implement the algorithm and measure the physical running time.,run program see how many time thing call runtime function base on that,5
Implement the algorithm and measure the physical running time.,try several set data on algorithm include bad case best case random case also try run program on different computer spec,5
Implement the algorithm and measure the physical running time.,measure relationship run algorithm different input size,5
Implement the algorithm and measure the physical running time.,experimental approach measure actual running time t t second,5
Implement the algorithm and measure the physical running time.,run code n time get average value drop constant low number example f x 3n 1 running time bef f x o n,2.5
Implement the algorithm and measure the physical running time.,use sort count principle number operation perform algorithm,5
Implement the algorithm and measure the physical running time.,every call memory add multiply equation type o n,1.5
Implement the algorithm and measure the physical running time.,not answer,0
Implement the algorithm and measure the physical running time.,experimental mean actually write prototype algorithm measure time take run give certain parameter,5
Implement the algorithm and measure the physical running time.,experimental term run time algorithm measure number operation require complete function number usually express big o notation,2.5
"In the array declaration, or by using an initializer list.",1 declare length array int array 10 2 initialize array int array 0 1 2 3 compiler assume size 4,5
"In the array declaration, or by using an initializer list.",explicitly int array 10 variable const int size 10 int array size,3
"In the array declaration, or by using an initializer list.",int n 10 array 10 integer int n arraysize where arraysize positive integer define user,3
"In the array declaration, or by using an initializer list.",use arraylist program ask array how many element have obj member length number slot have,3
"In the array declaration, or by using an initializer list.",implicit namely give value like 1 2 3 4 5 6 7 8 9 compiler automatically give size static declaration,5
"In the array declaration, or by using an initializer list.",static dynamic,2
"In the array declaration, or by using an initializer list.",number variable,3
"In the array declaration, or by using an initializer list.",one way specify array a 10 way specify array a arraysize 1 2 3 4 5 6 7 8 9 10,4
"In the array declaration, or by using an initializer list.",within bracket use initializer list,5
"In the array declaration, or by using an initializer list.",explicitly declare bracket i e int array 50 implicitly initialize several value i e int array 1 2 3,5
"In the array declaration, or by using an initializer list.",initialize array use initializer list declaration initialize size constant variable,5
"In the array declaration, or by using an initializer list.",specify number element array declaration constant use constant variable future scalability,3
"In the array declaration, or by using an initializer list.",either initialize array specific length initialize array declare content,5
"In the array declaration, or by using an initializer list.",one way declare size array use variable equal integer way size omit declaration compiler determines size array base on size initializer list,5
"In the array declaration, or by using an initializer list.",statically dynamically,2
"In the array declaration, or by using an initializer list.",declaration int array x initilizer int array 0 1 2 etc,5
"In the array declaration, or by using an initializer list.",use initializer list simply tell compiler how many element want array initializer list int a 10 2 3 4 5 elemental declaration int b 5 array 5 element them array already initialize,5
"In the array declaration, or by using an initializer list.",initialize size bracket int a 100 initializing length assign variable int a 1 2 3,5
"In the array declaration, or by using an initializer list.",manually inside bracket automatically via initializer list,5
"In the array declaration, or by using an initializer list.",array length explicitly specify input number element bracket declaration implicitly include initializer list without specify number compiler automatically declare array proper number element need list,5
"In the array declaration, or by using an initializer list.",supply integer inside bracket compiler count number element initializer list int n 5 int n 1 2 3 4 5,5
"In the array declaration, or by using an initializer list.",user define value number element initializer list,5
"In the array declaration, or by using an initializer list.",pas length along array use vector,2
"In the array declaration, or by using an initializer list.",specify array size constant variable set array element calculation,2
"In the array declaration, or by using an initializer list.",either input different element array cod give array specifacations size array also possible give specifacations tell array grow need,3
"In the array declaration, or by using an initializer list.",statically use dynamically use,4
"In the array declaration, or by using an initializer list.",assign size inside bracket declare array 3 set how many item set array equal 1 2 3,5
"In the array declaration, or by using an initializer list.",string specify strlen arrayname command get length string another way integer initiate size start ex array 40 specify possible length up 40 pass object actual ammout array another way declare initialize program,4
"In the array declaration, or by using an initializer list.",1 initializing array declaration initializer list 2 specify array size constant variable,5
"In the array declaration, or by using an initializer list.",define array 5 array 1 2 3 4 5,4
It avoids making copies of large data structures when calling functions.,only memory address send function no copy object sent need make make function run faster save memory,5
It avoids making copies of large data structures when calling functions.,less overhead pass value especially use large number,4
It avoids making copies of large data structures when calling functions.,give access caller data directly also allow modify data,3
It avoids making copies of large data structures when calling functions.,give call function ability access modify caller s argument data directly,3
It avoids making copies of large data structures when calling functions.,less overhead overall modify variable directly,4
It avoids making copies of large data structures when calling functions.,actual argument associate dummy argument function subroutine reference procedure reference actual argument list identifies correspondence actual argument provide list dummy argument subprogram,3
It avoids making copies of large data structures when calling functions.,pass reference eliminate pas by value overhead copy large amount data,5
It avoids making copies of large data structures when calling functions.,efficient change variable not online inside function outside new value use elsewhere,3
It avoids making copies of large data structures when calling functions.,function change data store variable pass reference directly,3
It avoids making copies of large data structures when calling functions.,not use unessesary memory space copy variable function,5
It avoids making copies of large data structures when calling functions.,able modify variable reference directly,3
It avoids making copies of large data structures when calling functions.,give call function ability access modify callerâ s argument data directly,3
It avoids making copies of large data structures when calling functions.,elimitates need copy large amonts data,5
It avoids making copies of large data structures when calling functions.,not make another copy waste memory,5
It avoids making copies of large data structures when calling functions.,data modify directly instead make copy data improve execution time large amount data,4
It avoids making copies of large data structures when calling functions.,take less memory thus make program faster,4
It avoids making copies of large data structures when calling functions.,pas reference modify value oppose pass value cannot change value,3
It avoids making copies of large data structures when calling functions.,give access modify caller s argument data directly eliminate pas value overhead copy large amount ofdata,5
It avoids making copies of large data structures when calling functions.,function directly modify argument pass reference,3
It avoids making copies of large data structures when calling functions.,pas reference good performance reason eliminate pas value overhead copy large amount data,5
It avoids making copies of large data structures when calling functions.,function s argument large size computing time memory space not waste copy down argument pass function also pass reference give function call permission read edit argument directly,5
It avoids making copies of large data structures when calling functions.,often efficient pas reference rather large object function allow compiler pas address object maintain syntax use access object,5
It avoids making copies of large data structures when calling functions.,not change original passing reference limit memory need program,5
It avoids making copies of large data structures when calling functions.,give call function ability access modify callerâ s argument data,3
It avoids making copies of large data structures when calling functions.,original variable reference modify directly call function,3
It avoids making copies of large data structures when calling functions.,pass reference eliminates copy large amount data typical pas value,5
It avoids making copies of large data structures when calling functions.,not alter original value variable pass,3
It avoids making copies of large data structures when calling functions.,overall program well performance mean faster not copy large amount data,5
It avoids making copies of large data structures when calling functions.,large data item pass without copy entire data point reduce execution time amout memory space need,5
It avoids making copies of large data structures when calling functions.,not make copy stuff,4
It avoids making copies of large data structures when calling functions.,give function ability access modify caller s argument data directly,3
It makes a copy of the function code in every place where a function call is made.,generates copy function s cod eliminates call function,5
It makes a copy of the function code in every place where a function call is made.,declare inline function header before int main call function anytime main program quickly easily,0
It makes a copy of the function code in every place where a function call is made.,generates copy function need again,2
It makes a copy of the function code in every place where a function call is made.,not answer,0
It makes a copy of the function code in every place where a function call is made.,compiler inline expand function call function s code get insert caller s code stream conceptually similar happens define macro can depend on zillion thing improve performance optimizer procedurally integrate call code â optimize call code caller,4
It makes a copy of the function code in every place where a function call is made.,expands function s definition place function call use many time need compiler expands on function,4
It makes a copy of the function code in every place where a function call is made.,replaces instance function call inline code itself result longer faster program,5
It makes a copy of the function code in every place where a function call is made.,generates copy function s code insert program,4
It makes a copy of the function code in every place where a function call is made.,function not treat separate unit like function,4
It makes a copy of the function code in every place where a function call is made.,function call replace code define inline function,5
It makes a copy of the function code in every place where a function call is made.,tell compiler make copy function s code place avoid function call typically ignore it except small function,5
It makes a copy of the function code in every place where a function call is made.,compiler ignore inline qualifier typically small function,2
It makes a copy of the function code in every place where a function call is made.,inline function copy place instead reference,5
It makes a copy of the function code in every place where a function call is made.,instead call function every time invoke compiler replace function call copy function body,5
It makes a copy of the function code in every place where a function call is made.,compiler generate copy function s code place when appropriate avoid function call,5
It makes a copy of the function code in every place where a function call is made.,place qualifier inline before function s return type function definition advise compiler generate copy function s code place avoid function call,5
It makes a copy of the function code in every place where a function call is made.,inline function compiler creates copy function s code place not make function call add function call stack,5
It makes a copy of the function code in every place where a function call is made.,expands small function out make code longer also make run faster,4
It makes a copy of the function code in every place where a function call is made.,complier include copy inline function instead make function call usually only small function,5
It makes a copy of the function code in every place where a function call is made.,generates copy function code place avoid function call,5
It makes a copy of the function code in every place where a function call is made.,program compiles it copy function inplace avoid function call,5
It makes a copy of the function code in every place where a function call is made.,expands function program,4
It makes a copy of the function code in every place where a function call is made.,function small enough expand run fast avoid make many call function,5
It makes a copy of the function code in every place where a function call is made.,compiler ignores inline qualifier,2
It makes a copy of the function code in every place where a function call is made.,treat function,2
It makes a copy of the function code in every place where a function call is made.,ignores inline qualifier typically small function,2
It makes a copy of the function code in every place where a function call is made.,inline keyword advise compiler copy function s code place avoid function call however compiler typically ignore inline qualifier small function,5
It makes a copy of the function code in every place where a function call is made.,compiler inline expand function call function s code get insert caller s code stream conceptually similar happens define macro can depend on zillion thing improve performance optimizer procedurally integrate call code â optimize call code caller,4
It makes a copy of the function code in every place where a function call is made.,multiple copy function code insert program making big,4
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort usually recursive sort method divide element sort half repeatedly sort small case work way up sort sort,1
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",iterate list assume list integer find small one put separate sort list traverse find next small move sort section repeat run element sort,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",scan list selects smallest large element place front increment curptr one scan list next smallest large element place respect sort element,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",select first object compare next object find one small switch two come back way see object previous last one great switch them decrease range look finish middle,1
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",search entire data set best element go current position move up position search remainder set best element new position,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selects small element list switch element correct position selects next small same,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",select element compare 2nd element great swap,1
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort scroll data structure look low or high unsorted piece data move hold spot increment spot one start process over,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",compare large element front element swap data accord value need,4
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",pick number set value less number leave number on right number large,1
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort find low element data set place behind pivot point,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort work pull value off side leave one value list insert value list value big go right small go leave,1
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort work go certain list go unsorted list select large item list place sorted array two array unsorted sorted complete step list sort,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",select small element place on left select small element sort respect item already on left continue till end collection item,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",run list find small or large value put appropriate position,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort iterate array one element time search right replace current value it,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",start first element replaces small element find right repeat next element list,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",take large item unsorted array swap last item unsorted array,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort search array low value swap first value array search next low value swap second item array on,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort sort array one element time first find element small key put first location within array list find next small puts second location on,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort select small element list second smallest and sort acordingly,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort iterate array one element time seek least value right replace current value it,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort sort algorithm divide list half two list compare first element list puts element another list small element before big one,1
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort work find small element compare large sort element,0
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",go middle list check see great less value give move list accordingly add value proper place,0
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort search small element remain data organization place large point new data organization,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort traverse unsorted array look small value find put begin unsorted array perform several time output sort array,5
"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort pick data member put new array pick another data member put order new array pick another insert correct place new array etc etc,1
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort use divide conquer strategy sort array part merge sort part back together,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort break array down half compare two value sort two value merges back break down part sort level merge set together till return back whole array order,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide array two half sort half merges two half together,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort recursively divides array two array array 1 element point merge 1 element array large sort array final return array sort version initial array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide array half sort half call self thus divide half sort array sort put element back original array sort,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",continually split array half sort side halve put back together organize,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",take initial array split two temporary small array sort two small array merge back single array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",take array split two solve simpler problem merge two answer correct order,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide data twor separate array sort two array merge back back together recursively,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort recursively divide array half only one element remain sort data on way recursive call merging cell,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",mergesort divide array small half combine sort subarrays one sort array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort split array element small small array s till value 1 reach,2.5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort divide problem half organize half brings two half together again,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide line half coninuously get only single value recombine value form sort line,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",take array split half sort two half either recursion iteration compare together give third array full sort list half rejoin,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort divide data half data one element reach merges element together accord placement comparison rest data,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort take array split half sends half back recursively merges sort two half start go back up,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",us divide conqure technique recursively merge back together compare element together sorted list do reverse divide conquer technique,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide conquer,1.5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort continually divide array or set container halve reach point one element leave merges set two sort array container,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort continuously break array half sort array concatenates back together one sort array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort work remove item sepperate memory location merge back together order,2
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide two sublists sublists break length 1 merges sublists sort,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",break single array down many array individual element sort element reconstruct back single array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divide recursuivly big array two array sort two array merge togather recuruivly,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort split array element small array array reach size 1 merge sort merges small array array size 2 move next step merges next array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort use divide conquer idea divide array half multiple time join element array back one sort array one best sort algorithm besides quicksort,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort split array two half sort two small array merges back together form sort array,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort break array half continue 2 element compare sort them after merges back keep on sort algorithm so,5
"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",split large array small array recur array size 1 merges array back together source array completely sourted,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",throw data head take tail,4
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",use link list 2 pointer one front one back long back front queue not empty,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",create add nodes end list remove node begin list,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",use first element list remove point queue insert item end list,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",create list node head top pointer function basically substitute pop push enqueue dequeue,2
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",make linked list add on front delete back keep track so,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",implement link list only allow node add tail only retrieve head,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",queue implement list keep track two pointer head tail,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",implement operation dequeue list operation remove 1 operation getfront queuefront list operation retrieve 1 queuefront,3
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",queue storage class list enqueue add item end list dequeue return first item list,4
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",list unlimited element it push node onto end list pop one front,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",create node input data continue add list dequeueing get first element data set next element list new first element,4
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",enqueue end link list dequeue item begin head list,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",utilize front pointer back pointer front poiner back pointer point first item queue add item front remain back poiner next point new item new item assign become new back pointer,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",theoretically two way one use process power memory no large queue ever full use almost infinite memory practical method two place item array remove item position one array after shift array add another element require option use infinite memory use long term queue job scheduling go nonstop extend period implement array add item read item one raise counter value two ecetera continue add element array downside method after use element one still memory im crazy know,0
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",remove first element reference second element new head list,3
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",link list stack principle queue s top element element always remove first must use node contain element pointer top element also call head pointer,2
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",check list empty add element list,1
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",pointer last element list use enqueue insert item there link first last element together dequeue list,3
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",list add back pointer program know end,4
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",use list represent item queue,0
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",make head list begin queue last listed item insertion point queue,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",link list check front rear keep enqueueing element front equal rear 1,3
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",element queue allocate node link list new element add head list dequeued element come off tail,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",temp gt next null front rear gt next temp else front temp rear temp,3
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",implement list tail pointer point item recently insert onto back list head pointer point item least recently insert onto list also item only remove front list only add back list,5
"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",fairly easy singly link list pointer head tail hte list deque first item que create temp pointer next element delete head make head temporary pointer enque new item use pointer end list add new item next item tail make tail next item current tail,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",make list make bottom head add on end make end top,3
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use link list one way implement stack handle essentially number element usually convenient put data structure module thus want create file stack h stack c,0
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",top first pointer,3
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use link list push node contains int stack get end link list,1
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",dynamicly create space stack grow stack long need,1
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use node keep track head stack use push pop create stack need,4
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",keep pointer point last element enter front array move pointer back delete element,2
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",declare pointer point head link list only add remove node begin list,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",link list push add item onto begin list pop remove first element list,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",singly link list already lot like stack depends on way address move head,4
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use add function list begin stack remove pop,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",implement stack use array link list use pointer point element node next element stack use pointer stack becomes link list,1
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",add element end list link element before it pop element take last element list set previous one end list,3
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use head top push pop node head,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use pointer,0
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use head top stack only modify head push pop push add new item head pop remove item head,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",implement stack list change pointer first element list new item move pointer top stack next item remove item,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",create new list pop element stack need push stack remove item unless stack empty top item head list last item end,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",implement list head pointer point element recently push onto list pop function change head pointer point next last element list remove element head pointer previously point to,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",head list last item add push add new head,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",singly link list already easily use lifo data storage member stack simply push popped list first item last out,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",element only insert remove head list no header node current pointer,5
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",create link list add element top stack push delete element popping,4
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",add element end link list update pointer call top time modify list,2
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use link list keep track pointer point first item,4
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",implementation stack use single link list operation perform on stack 1 push function insertion push of element stack similar insertion element end single link list see function insert_end program operation single link list 2 pop function deletion pop up element stack similar deletion element end single link list see function delete_end program operation single link list 3 stack_display this function display element stack,3
"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",create node base list point next list item down,0
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",predetermine size stack array type not grow,1
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",stack usually hold bunch item type therefore u use array hold content stack integer top hold index element top stack u choose array size sequence operation use u decide data type need stack data structure,2
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",use pointer always point end array list push pop modification,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",use array implement stack add element add end array remove item end array also,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",keep track last item enter array not allow user access part array,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",use dynamically allocated array must provide destructor copy constructor,2
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",efficiency easy implement leave right method right item one retrieve pop perform push place object on furthest element,3
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",allocate array pre define size bottom stack element store element 0 last index array top increment top one element push,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",allocate array size bottom stack element store element last index array top increment top one element push decrement after pop,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",implement array pre define size bottom stack element store element 0 last element store array top increment top element push decrement item pop,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",make array make bottom spot 0 make last spot array top increment top ad,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",declare variable point last item array increase item push onto stack decrease item pop off top,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",element add array last element add end element pop take last element off array,4
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",allocate array predetermine size integer track top element stack bottom member stack go element 0 array element push top tracking integer incremented,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",store stack array keep mind first element,3
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",use index value call top keep track last element array,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",allocate array size bottom stack element store element 0,4
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",array fix size add delete element end array use pointer keep track last element add time add delete element update pointer check equal max size array,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",max number element allocate array number element store element start 0 keep track how many element currently list,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create array size n n one element push n one element pop,4
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create int value store head stack increment top one element push decrement after pop,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",define array keep track pointer last element item add,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create array implement pointer point next list item down stack up,1
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",use array push one int time stack get end array,4
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create array base on pre define size n not element n bottom stack element store element 0 last index array top increment top one element push decrement after pop,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",allocate pre define array bottom element store element 0 last index head,5
"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",treat begin array begin stack,4
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list indefinite size whereas array specific size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list not specify size easier add remove,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",insert link list far cheap insert array array item after one insert must shift link list only pointer replace,4
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",advantage link list not limited size like array,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list not memory constraint total memory,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list able grow size element add list,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",grow dynamically unlike fix size array,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list no predefined length thus virtually unlimited item list,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list not confine specific size element add remove far easy also easy traverse,4.5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list grow infinite size array fix size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",main advantage link list size adjust runtime,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linkded list not fix size array fix size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",not predetermine list size array link list ability large want add memory need,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",dont fix size no shiftnig need do insertion deletion,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",no predetermined length,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list not definite size big small need not allocate extra memory element not need array size must define,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list variable size array fix size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list dynamic change add subtract easily not linear memory array pre specify size cast certain amount disk space make insertion array difficult element must shift reach end array do even data input link list not run problem,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",primary advantage link list array ability become large small data add removed list whereas array waste memory small data set run space large data set,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list dont fix size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",add many node like without specify list size array get big copy entire content another large array get room,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list dynamically grow,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list dynamic size array static size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list dynamically allocate size change need,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list dynamic size array only fix size take allot extra operation increase size,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",resizeable,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link list many dynamically grown not limit,5
"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",array fix size link list flexible add delete element,5
N (the length of the array) operations achieved for a sorted array.,n operation n number item,3
N (the length of the array) operations achieved for a sorted array.,theta n best case senario everything already sort,5
N (the length of the array) operations achieved for a sorted array.,run time sort program n 2 best case list already sort bad case list sort reverse,4
N (the length of the array) operations achieved for a sorted array.,best case n bad case n factorial,2
N (the length of the array) operations achieved for a sorted array.,best case o n n 1 that s take scan array make one swap array sort take only 1 operation,4
N (the length of the array) operations achieved for a sorted array.,o n,3
N (the length of the array) operations achieved for a sorted array.,insertion sort o n performs n 1 operation best case scenario list array already sort,5
N (the length of the array) operations achieved for a sorted array.,best case scenario insertion sort element array already sort cause loop iterate x time x number element array loop never iterate result insertion sort require x operation,5
N (the length of the array) operations achieved for a sorted array.,o n list already sort,5
N (the length of the array) operations achieved for a sorted array.,n operation n number element array best case element already sort,5
N (the length of the array) operations achieved for a sorted array.,insertion sort make zero operation and length 1 comparison best case scenario be array give already order,3
N (the length of the array) operations achieved for a sorted array.,bad case o n time best case o n 2 time,2
N (the length of the array) operations achieved for a sorted array.,best case scenario insertion sort list already sort number operation number element,5
N (the length of the array) operations achieved for a sorted array.,consider only one item easy sort also trivial result nothing move two item allow algorithm sort item correct order,2
N (the length of the array) operations achieved for a sorted array.,insertion sort take n 1 operation array reverse order,4
N (the length of the array) operations achieved for a sorted array.,n number time n equal number element list best case scenario element list already sort,5
N (the length of the array) operations achieved for a sorted array.,n 1,3
N (the length of the array) operations achieved for a sorted array.,best case element sort n 1,5
N (the length of the array) operations achieved for a sorted array.,n 1 best case array already sort,5
N (the length of the array) operations achieved for a sorted array.,best case only look list once best case scenario go list not make change the list already sort,5
N (the length of the array) operations achieved for a sorted array.,best case 1 bad case n,0
N (the length of the array) operations achieved for a sorted array.,best case scenario already sort list insertion sort progress list number operation directly proportional number element list also note o n big o notation,5
N (the length of the array) operations achieved for a sorted array.,n operation best case scenario number increase order,5
N (the length of the array) operations achieved for a sorted array.,number operation insertion sort best case n n 1 2 best case insertion sort on sorted list run o n,3
N (the length of the array) operations achieved for a sorted array.,simplistic move one element list one inserting correct position new slot start over best case 0 1,2
N (the length of the array) operations achieved for a sorted array.,1 operation best case scenario s already sort one comparision,3
N (the length of the array) operations achieved for a sorted array.,1 list two ints only one must move,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",stackpush stackpop stackisempty,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",either traverse entire list pop give part create pointer system automatically point it,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",push add give node top stack leave previous node below pop remove return current top node stack,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop element one stack check see desire element not push onto another stack finish pop item second stack push back onto first stack this ensure order element maintain,5
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",function keep track element pop function put pop element backinto function,4
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",createstack push isempty pop boolean return value,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",traverse list array find element,1
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop element off stack and another stack storage desire element found,4
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop element off stack find element push pop element back on stack,5
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",stack implement use array simply search array item stack implement use link list pop value off stack either value find stack empty item put back list,4
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop item off top find look for stack end up empty never find item not exist stack also necessary save pop value case want recreate stack,5
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",need pop opertation go throught stack find element,3
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",iterate stack check number against current element,0
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",depends on type stack on true stack haft pop element stack find element want after need push element remove back stack order remove java style stack peek function return element want instead require perform excessive action require true stack,5
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",keep pop node store alternate stack give element find pop give element push previously pop node back onto stack,5
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",traverse stack pop element search,3
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop element compare look push back on stack not lose,4
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",need perform search list element i dont really understand question ask it not clear,0
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",basically pop stack find give element,3
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop push,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop element push back,4
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",top item give element pop stack repeat item find stack empty,3
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop operation,1
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",keep use peek gettop see top element pop top element peek gettop provide element look for,2
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",need pop item on stack compare item item find no item need remove,3
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",use link list stack need temp stack retain value use pop function pop off element compare it not element look for push temp stack repeat element find find it pop off temp stack back onto regular stack complete stack again,5
"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",isemptry determines stack full not pop to remove top element not on look search you compare element stack data look for,2
Private and public.,local global local variable function specific,1.5
Private and public.,public private,5
Private and public.,function data member give access specification public private friend public access give function member not give specific access right,5
Private and public.,static long unsigned,0
Private and public.,public private protect,5
Private and public.,private public protect friend,5
Private and public.,public function variable use outside class private function variable only used class,5
Private and public.,private public protect,5
Private and public.,public access program private only accessed class function no outside function call,5
Private and public.,data member data function access specifier,0
Private and public.,public private protect,5
Private and public.,public private protect,5
Private and public.,public private,5
Private and public.,public access outside class private accessible only inside class not inherit protect accessible only inside class inherit,5
Private and public.,public private,5
Private and public.,public private restrict,4.5
Private and public.,public private,5
Private and public.,public private,5
Private and public.,private public,5
Private and public.,access specifier use c class definition private public,5
Private and public.,public private specifier,5
Private and public.,c class definition include access specifier public private static,4
Private and public.,public private protect,5
Private and public.,public private,5
Private and public.,public protect private,5
Private and public.,public private,5
Private and public.,access specifier public private,5
push,stack operation correspond enqueue queue push operation,5
push,push stack operation correspond enqueue operation queue operation insert new item one end the top back respectively adt,5
push,push,5
push,push,5
push,push insert something top stack,5
push,push operation,5
push,fifo first first,0
push,enqueue corresponds push dequeue corresponds pop,5
push,push,5
push,stack operation almost opposite enqueue operation,0
push,push operation put item end list,5
push,not sure question mean use stack push operation enqueue operation detect palindrome,5
push,push enqueue pop dequeue,5
push,enqueue queue equivalent push dequeue queue equivalent pop,5
push,push method stack operation,5
push,push correspond enqueue similarly place new element stack queue,5
push and pop,push pop push add element stack pop remove top element stack,5
push and pop,push add element pop remove element,5
push and pop,push pop search isempty,4
push and pop,push insert element on top stack pop remove last inserted element stack,5
push and pop,push pop two main function define stack,5
push and pop,push pop,5
push and pop,push add element stack pop take element off stack,5
push and pop,push add item top stack pop remove top item stack,5
push and pop,push pop push add give node top stack leave previous node below pop remove return current top node stack,5
push and pop,push pop full isempty,4.5
push and pop,push pop,5
push and pop,push pop push put object stack pop take follow first last rule,5
push and pop,push insert pop retrieve,5
push and pop,push pop,5
push and pop,push insert item pop remove item,5
push and pop,push pop two main function stack,5
push and pop,pop function push function,5
push and pop,push put element on stack pop take element off stack,5
push and pop,push add item top stack pop take first item off top stack,5
push and pop,pop push,5
push and pop,pop push,5
push and pop,add new item remove item,5
push and pop,main operation stack push pop push add item top stack pop remove top item stack,5
push and pop,push function pop function,5
push and pop,push pop,5
push and pop,push pop,5
push and pop,isempty push pop along usually,5
push and pop,push pop add remove data stack respectively,5
push and pop,pop push,5
push and pop,push add element top stack pop remove top element stack,5
push and pop,pop remove head least recently insert node stack push insert new node head stack,5
push and pop,pop push remove element insert element,5
push and pop,push pop isempty isfull maybe list show elements operation count how many element stack,4.5
push and pop,pop remove item push insert element,5
push and pop,push add item stack pop pull last item add array,5
push and pop,push pop,5
push and pop,main function define stack push put element on top stack pop remove item top,5
push and pop,push pop,5
push and pop,push pop push put object list pop take last object off,5
push and pop,push pop,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",select minimum number array put current position move on,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",loop entire list iteration find small element move current position,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",run find low or high value put desired position,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",search array large small element move front array search next large small element move front,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find minimum value list swap first element list find second large swap second element array continue like array sort,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",place small item list position 1 proceeds value last position ray reach,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",selection sort algorithm selects larges item array put place select next large array sort,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",selection sort search whole array large item puts end array search second large item put second last spot on,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",selection sort find small number leave unsorted array put end sort,4
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",selects minimum remaining element array palces miminum current position move next position,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",cycle unsorted list place minimum next slot sort list repeat,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",selection sort find minimum value list swap first value list repeat throughout list,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find low value place front find next low place front last value etc,4
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find small element place 1st position process repeat on rest array,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find low unsorted value array place current position start first element array advance current position one,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",sort find large item place end next large found place next last continue only one number leave begin sorted array,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",search large item array swap last unsorted item,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find small value list make first element find small value leftover list make first element leftover list continue list sort,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",sort element compare two element swap small one sort element array,2
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",select small number list move front list advance next number,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",selection sort choose large small value unsorted list create new list use selection depend on how sorted,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find low value place front list swap value continue move right,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find small put current position till get end,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",main idea behind selection sort take least variable right put directly leave,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find minimum value list swap value first position repeat step above remainder list start second position,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",put big element end list place next high element behind it on,3
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find minimum element array swap first element repeat step swap minimum element nth position array,5
"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find minimum value swap value first position,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",compare two number time swap entire list sort,1
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort divide list sort unsorted region take item unsorted region insert correct order sort region,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insert item proper position shift large sorted array value right,1
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort take entitity unsorted array order sort correct position entity sort,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",sort array list build one entry time,3
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",start first element array follow element put place determine small large start element,3
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",marker sort everything leave value every new value move right,3
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",main idea behind insertion sort take random variable right insert order leave,4
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",assume first number sort move down list insert number come across correspond place on sorted side list,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort algorithm first element array sort list pick one one take unsorted array sort array,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",take number choose pivot point insert number correct position pivot point,2
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",every iteration insertion sort take away element input data insert right position sort list,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",take element insert correct position respect element before,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort progress list element determines next element insert already sort array start sort use first two element,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insert array item appropriate position smallest large pivot start on second element array,3
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort create new array insert item place respect new array,4
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",take second element swap 1st less keep large go third element insert right place respect first 2 element on,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort after k iteration first k item array sort take k 1 item insert correct position already sort k element,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",start second element check see less element s leave insert correct position,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",go list only once picking integer put desired position continue,4
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",comparison sort sort array build one entry time,4
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",start begin array take element order place correct position relative previously sort element,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",one one item take place correct place sort portion array no item,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",sort element array remove element input data insert correct position,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",take element array compare next element depend on value two element switch program compare new switched element next one array,1
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",look 2nd element move forward place element correct spot,4
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort remove element data insert correct position already sorted list,5
"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort simple sort algorithm comparison sort sort array or list built one entry time,4
The address of a location in memory.,data type store memory address another variable,5
The address of a location in memory.,pointer variable hold memory address location another variable,5
The address of a location in memory.,variable memory hold address another memory location point,5
The address of a location in memory.,pointer variable memory address variable,5
The address of a location in memory.,pointer variable contains memory address something use value array even function,5
The address of a location in memory.,pointer point location memory certain data type,4.5
The address of a location in memory.,pointer reference memory location,5
The address of a location in memory.,contains object s memory address,5
The address of a location in memory.,data type point specific memory address,5
The address of a location in memory.,like variable only hold address meomrry not physical address,1
The address of a location in memory.,like variable except only hold address memory variable not physical information,5
The address of a location in memory.,pointer point location memory data store,5
The address of a location in memory.,form store data keep location memory data type object,5
The address of a location in memory.,pointer variable contains memory address give value,4.5
The address of a location in memory.,variable contains memory address data object,5
The address of a location in memory.,pointer variable point address location another variable represent,5
The address of a location in memory.,object point specific place memory variable value store,5
The address of a location in memory.,variable store address memory location,5
The address of a location in memory.,data type point address memory contain certain information use pas by reference save memory,5
The address of a location in memory.,pointer element reference memory location,5
The address of a location in memory.,pointer variable store address another variable,5
The address of a location in memory.,variable hold address another variable access content variable,5
The address of a location in memory.,pointer variable point address memory contains data pointer not contain point data only memory address,5
The address of a location in memory.,pointer variable hold address give variable and give data type,5
The address of a location in memory.,pointer memory address point data member,5
The address of a location in memory.,pointer program data type whose value point another value store computer memory address,5
The address of a location in memory.,data type memory address value,1.5
The address of a location in memory.,pointer alias object memory,3.5
The address of the location in memory where the function code resides.,pointer function address code function resides pass function return function store array assign pointer,5
The address of the location in memory where the function code resides.,pointer function,5
The address of the location in memory where the function code resides.,function pointer contain memory address function use function pointer function pass return another function function pointer also store array,5
The address of the location in memory where the function code resides.,contains address function memory,5
The address of the location in memory where the function code resides.,function pointer pointer i e variable point address function,5
The address of the location in memory where the function code resides.,function pointer pointer contain address function memory,5
The address of the location in memory where the function code resides.,pointer contain address function,5
The address of the location in memory where the function code resides.,point memory address function kind like break branch off tree object hit object it,5
The address of the location in memory where the function code resides.,pointer contain address function,5
The address of the location in memory where the function code resides.,contains address function memory,5
The address of the location in memory where the function code resides.,dereferenced function pointer call function zero argument,4
The address of the location in memory where the function code resides.,contains address function memory,5
The address of the location in memory where the function code resides.,function pointer pointer function function pointer contain address function,5
The address of the location in memory where the function code resides.,pointer function contain address function,5
The address of the location in memory where the function code resides.,function pointer pointer function use substitution call function,5
The address of the location in memory where the function code resides.,pointer variable point function address,5
The address of the location in memory where the function code resides.,pointer contain address function,5
The address of the location in memory where the function code resides.,dereferenced function pointer invokes function pass zero argument like normal function program language like c function pointer use simplify code replace large switch statement,4
The address of the location in memory where the function code resides.,pointer point function itself allow pass function parameter another function,5
The address of the location in memory where the function code resides.,pointer function itself contain address function use call function,5
The address of the location in memory where the function code resides.,pointer point address function,5
The address of the location in memory where the function code resides.,pointer contain address function pass return function well store array assign function pointer,5
The address of the location in memory where the function code resides.,pointer point memory address begin part function pretty much pointer point function call execute,5
The address of the location in memory where the function code resides.,pointer contain address function memory,5
The address of the location in memory where the function code resides.,pointer contain address function definition,4
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array allocate program start free program exit limit scope array not declare static allocate freed come scope,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array exist duration program,4
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",not create initialized time program call function not destroy every time function end program,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array only reference not access also static array use without create object,3
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",element initialize zero not explicitly initialize static array non static array not initialize zero,4
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",program intializes static local array declaration first encounter static array not initialize explicityly programmer earch element array intialized zero compiler array create non static array member cannot initialized c,3
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",array not declare static re initialize every time function declare call static array initialize only once declaration store value element throughout duration program even function call multiple time static array only initialize once,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",element initialize zero not explicitly initialize not happen automatic local array,4
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array only initilized once non static array re initilized program reach initilization line again,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static local array exist duration program element initialize 0 not explicitly initialize static local array s element still call later unless specifically initialize something else not happen automatic array,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",declare fix static mean not change size storage allocate however one not dynamic arrarys resize,1
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",only constant use declare size automatic static array exist duration program initialize declaration first encounter element initialize zero not explicitly initialize,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array keep value after end function non static reinitialize every time,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",array static remain size throughout program execution,3
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array cannot change program,1
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array pre runtime size size cannot change dynamic array get size runtime,1
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",array declare static not create time array call,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",array declare static only declare,2
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",array declare static not create initialized time function also not destroy function terminates,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static cannot change,1
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",declare static array not destroy after function over array not declare static array create initialize every time function call it,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array set size cannot change data not need space assign go beyond size,3
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array store new value assign element mean call function twice use last value return first time not declare static new value not store reset original value,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array create initialize only once value not destroy function terminate program automatic array reset everytime function call,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",array declare static available begin program end one w o static declaration disappear not access within right scope,4
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array exist memory program terminates whereas automatic or normal array remove function create terminates,5
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array declare size know program whereas non static array leave size undeclared open assign later usually use input purpose,1
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",not answer,0
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static member prevents name conflict not put global namespace allow information hide private public,1
"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static array available throughout program,5
The block inside a do...while statement will execute at least once.,do while statement always execute do piece code least before check condition statement always check condition first,5
The block inside a do...while statement will execute at least once.,no answer,0
The block inside a do...while statement will execute at least once.,statement the condition check validity repeat conditon false br br do while statement the code perform least checked valid condition continue br,5
The block inside a do...while statement will execute at least once.,do loop always run once loop performs test before run loop,5
The block inside a do...while statement will execute at least once.,do while statement s body always execute least once statement not execute unless condition true,5
The block inside a do...while statement will execute at least once.,loop use execute block code long condition true do while loop use execute block code long condition satisfy difference do while loop test condition before execution content do while loop test condition after execution content least once,5
The block inside a do...while statement will execute at least once.,main difference do while loop do while loop always cycle loop least once loop not always so,5
The block inside a do...while statement will execute at least once.,statement evaluate statement before execute cycle loop include first cycle mean loop not always execute do while run evaluate statement after run cycle loop ensure loop always execute least one time,5
The block inside a do...while statement will execute at least once.,do while pass atleast 1 time before check condition however fail enter loop condition fails first place,5
The block inside a do...while statement will execute at least once.,the â doâ statement first evaluate condition executes line code statement 0 time â do whileâ statement execute line code evaluate condition,4
The block inside a do...while statement will execute at least once.,statement test condition loop first chance loop never run do while loop always run once test determine run again,5
The block inside a do...while statement will execute at least once.,while run embed code least once command not necessarily,4
The block inside a do...while statement will execute at least once.,loop pre check it check condition statement before executes code within block loop post check it check condition after block executes run least no matter condition statement be,5
The block inside a do...while statement will execute at least once.,main difference do while statement do while statement statement block always execute atleast once statement only execute condition true,5
The block inside a do...while statement will execute at least once.,test true first before run do while run first before check,5
The block inside a do...while statement will execute at least once.,loop do while statement always execute once,4
The block inside a do...while statement will execute at least once.,termination condition do while statement usually end loop run least once statement condition false begin with loop never run,5
The block inside a do...while statement will execute at least once.,loop terminates begin loop do while terminates end loop,3
The block inside a do...while statement will execute at least once.,statement test condition before start do while statement loop before condition test,5
The block inside a do...while statement will execute at least once.,loop body always execute least,3
The block inside a do...while statement will execute at least once.,statement only process statement meet do while always process once only continue statement meet,5
The block inside a do...while statement will execute at least once.,loop always execute once loop s conditional statement true run,5
The block inside a do...while statement will execute at least once.,do while loop always execute atleast once loop never execute depend on teh condition,5
The block inside a do...while statement will execute at least once.,statement within block loop always execute least regardless condition whereas loop never execute condition not meet,5
The block inside a do...while statement will execute at least once.,main difference do while statement construct consist block code condition first code within block execute condition evaluate do proven false difference loop test condition before code within block execute,5
The block inside a do...while statement will execute at least once.,loop check statement make sure true before execute loop execute before check statement see run again,5
The block inside a do...while statement will execute at least once.,loop check condition true not first true excutes statement do loop executes statement before check condition condition true excute statement again do while loop excute statement atleast once,5
The block inside a do...while statement will execute at least once.,do while statement evaluate whether not loop after run block contain within least once main differance statement possibility never use statement on hand always run least before evaluate whether run again,5
The block inside a do...while statement will execute at least once.,loop evaluate expression top loop decides need execute do while always execute least evaluates expression bottom loop,5
The char[] will automatically add a null \0 character at the end of the string.,string pass array char individual character store manipulate although word store string variable stored one word not individual character,0
The char[] will automatically add a null \0 character at the end of the string.,string variable size function call available character array usually static size,2.5
The char[] will automatically add a null \0 character at the end of the string.,string variable single entinty letter combine one char letter assign memory value variable assign i e char 0 char 1,0
The char[] will automatically add a null \0 character at the end of the string.,string char add null value end string,5
The char[] will automatically add a null \0 character at the end of the string.,type char contain null value last element whereas type string not,5
The char[] will automatically add a null \0 character at the end of the string.,difference string declare variable type char char include array versus string character read variable,0
The char[] will automatically add a null \0 character at the end of the string.,string character specific variable type no extra data end string type char character null 0,5
The char[] will automatically add a null \0 character at the end of the string.,variable type char character store different memory address access easly string character not easy able access character string,0
The char[] will automatically add a null \0 character at the end of the string.,variable char basically non command key on keyboard press string collection letter number store together use later comonly string use word char use less opperations perform on useful way,0
The char[] will automatically add a null \0 character at the end of the string.,type char null n element end,5
The char[] will automatically add a null \0 character at the end of the string.,string contain null character end string make easily possible get string length char array virtually unlimited length therefore size must declare limited,5
The char[] will automatically add a null \0 character at the end of the string.,programmer must provide null terminate character string character use type char must also ensure array large enough contain input string character null terminate character,5
The char[] will automatically add a null \0 character at the end of the string.,character array call on individual letter string array only call word,0
The char[] will automatically add a null \0 character at the end of the string.,array string store character char character string store memory location array string character only one memory location,0
The char[] will automatically add a null \0 character at the end of the string.,character array end line character end it,4.5
The char[] will automatically add a null \0 character at the end of the string.,string character read variable type string include,0
The char[] will automatically add a null \0 character at the end of the string.,string contains word char contain phrase string character,0
The char[] will automatically add a null \0 character at the end of the string.,one type string extra string member 0 end,2.5
The char[] will automatically add a null \0 character at the end of the string.,array string read string literal mean anything within quote char array read string individual character,0
The char[] will automatically add a null \0 character at the end of the string.,character put char array also null terminate character add end 0,5
The char[] will automatically add a null \0 character at the end of the string.,string character null character value end string,5
The char[] will automatically add a null \0 character at the end of the string.,string type string act single object individual char entity accessible only specific string class function char array less robust allows direct access specific char entity,1.5
The char[] will automatically add a null \0 character at the end of the string.,char array need end character signature make up character separate other string object itself value user enters,5
The char[] will automatically add a null \0 character at the end of the string.,string character follow null statement type string example string s,5
The char[] will automatically add a null \0 character at the end of the string.,read string character also read white space read character declare char only read character no white space,1.5
The char[] will automatically add a null \0 character at the end of the string.,character array terminate whitespace include space string terminate encounter new line character,1.5
The char[] will automatically add a null \0 character at the end of the string.,array character store null character end,5
The char[] will automatically add a null \0 character at the end of the string.,variable type string terminate character 0 end it,2.5
The char[] will automatically add a null \0 character at the end of the string.,string variable change size pass function value whereas type char cannot change size pass function reference only,0
The char[] will automatically add a null \0 character at the end of the string.,array character one element last element the terminate element null doesnt exist variable type string,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",access particular element fast location memory determine mathematically access directly,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",link list only allow sequential access array allow random access,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",keep up head list,1
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",access specific element quickly array link list must traverse list get access element,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",take up less memory contiguously store,4
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array allow random access item cotained time link list must go toget desired item,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array good random access good sequential access constant time link list linear random access array faster case,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array item access directly equal access time,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array require less memory link list allow direct access specify item also insertion deletion array not require list traversal,4
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array direct access element link list traverse list up element need,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",not iterate entire list access element,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array capable access part array base on index link list must traverse begin end be data only accessed adjacent previous next node,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array easier implement require less memory,3
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array set list value mean pick spot array a 7 pick 8th spot array link list keep track pointer want take specific node out otherwise must traverse entire list,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array fix less error prone,1
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",direct access element speed link list increase search time access element even list sort like get last element without pointer directly end list,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array retrieve memory place list link list traverse individual node,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",on hand array allow random access link list allow only sequential access element singly link list fact only traverse one direction,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array base implementation require less memory pointer base one,3
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",entitiy array access immediately whereas link list must traverse one item time object only point adjacent object,5
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array base implementation require less memory pointer base one,3
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",link list increase complexity implementation link list array keep grow leads increase memory,2
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",go up down array only go one direction traverse link list,1
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",go forward backwards point piece data give time link list point next piece data,2
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array base implementation require less memory line list base implementation,3
"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",array size fix link not fix data also access quick array list also memory requirement less no pointer require arrays random access less overhead compare linked list sequential access only much overhead no cache memory support on hand array allow random access link list allow only sequential access element singly link list fact only traverse one direction,5
The height of the tree (or log of the number of elements in the tree).,take 3 comparison find element binary search tree,0
The height of the tree (or log of the number of elements in the tree).,n k 1 k height tree,0
The height of the tree (or log of the number of elements in the tree).,minimum log n log 2 maximum n search n number node,4
The height of the tree (or log of the number of elements in the tree).,take one less comparison tree s height big o notation take o log n comparison tree balance,5
The height of the tree (or log of the number of elements in the tree).,log n,5
The height of the tree (or log of the number of elements in the tree).,binary search tree size n take log n comparison find specified element,5
The height of the tree (or log of the number of elements in the tree).,n 1 2 algorithm compare find element,0
The height of the tree (or log of the number of elements in the tree).,log n,5
The height of the tree (or log of the number of elements in the tree).,take many comparison number level binary search tree only compare one number level,5
The height of the tree (or log of the number of elements in the tree).,nlog n,0
The height of the tree (or log of the number of elements in the tree).,take h comparison h height tree,5
The height of the tree (or log of the number of elements in the tree).,log n n equal number node,5
The height of the tree (or log of the number of elements in the tree).,n 1,2
The height of the tree (or log of the number of elements in the tree).,o nlog n,0
The height of the tree (or log of the number of elements in the tree).,o n,2
The height of the tree (or log of the number of elements in the tree).,on runtime order log n n number node binary tree,5
The height of the tree (or log of the number of elements in the tree).,logn,5
The height of the tree (or log of the number of elements in the tree).,2 way key comparison,0
The height of the tree (or log of the number of elements in the tree).,equivalent height tree,5
The height of the tree (or log of the number of elements in the tree).,o log n,5
The height of the tree (or log of the number of elements in the tree).,o log n balance tree,5
The height of the tree (or log of the number of elements in the tree).,depends on half tree level have,3
The height of the tree (or log of the number of elements in the tree).,log n comparison,5
The height of the tree.,3 step most 3 case,0
The height of the tree.,log n step,4.5
The height of the tree.,take h step h height tree,5
The height of the tree.,log n,4.5
The height of the tree.,find node binary search tree take number step level tree,5
The height of the tree.,log n n equal total number node tree,4.5
The height of the tree.,n n 1 2,0
The height of the tree.,2n 1,0
The height of the tree.,give n element take n 2 step find search criterion,0
The height of the tree.,number step number level generation tree,5
The height of the tree.,three step visit root node go right subtree after visit right subtree visit leave subtree,0
The height of the tree.,o log n,4.5
The height of the tree.,bad case scenario number level tree ie node farthest position root node best case 1 step root node,5
The height of the tree.,depends on location node look for root one step else small current on node go left large current node on go right,0
The height of the tree.,2 n n level binary tree,0
The height of the tree.,number step search node function n 1,2.5
The height of the tree.,height tree,5
The height of the tree.,log n,4.5
The height of the tree.,log n n number node,4.5
The height of the tree.,depend on way tree order anywhere log n n step,5
The height of the tree.,binary search tree construct efficiently best case scenario o log n time n number item tree binary search tree construct poorly instance root tree 1 progressing downwards right child last one way linear link list bad case scenario full traversal o n time n number item tree,5
The height of the tree.,o log n,4.5
The height of the tree.,depends on install search tree whatever case repeat back along case primary node,0
The height of the tree.,number level height tree,5
The height of the tree.,n n number node,2.5
The height of the tree.,take n 2 element give n,0
The last element in a circular linked list points to the head of the list.,case non circular link list last node list u want move first u need go one step back till u reach first circular link list last first need make only one move single link list u move only one direction double link list u move direction back forward forward,2
The last element in a circular linked list points to the head of the list.,circular link list every node successor mean last node s successor head first node,5
The last element in a circular linked list points to the head of the list.,circular link list not last element instead last item point head list,5
The last element in a circular linked list points to the head of the list.,circular link list last element point first,5
The last element in a circular linked list points to the head of the list.,difference circular link list basic link list circular link list last node reference first node every node circular link list successor no node circular link list contains null,5
The last element in a circular linked list points to the head of the list.,no node circular link list contains null last node point pack node within list,5
The last element in a circular linked list points to the head of the list.,circular link list last item point first item,5
The last element in a circular linked list points to the head of the list.,on circular link list end element point head thus make circle basic link list nothing point head last element point null,5
The last element in a circular linked list points to the head of the list.,pass reference want function change pointer,0
The last element in a circular linked list points to the head of the list.,basic link list end null value circular link list pointer end beginning,5
The last element in a circular linked list points to the head of the list.,circular link list useful describe naturally circular structure advantage regular structure able traverse list start point,2
The last element in a circular linked list points to the head of the list.,circular link list link list link item continuous circle allow full list traverse start item list fix head tail not require,5
The last element in a circular linked list points to the head of the list.,circular link list last node contains pointer go back first node basic link list last node contains null pointer,5
The last element in a circular linked list points to the head of the list.,basic link list point null end circular point head end,5
The last element in a circular linked list points to the head of the list.,circular link list last object link back first object,5
The last element in a circular linked list points to the head of the list.,how determine end list basic link list last element link null pointer circular link list link head element end,5
The last element in a circular linked list points to the head of the list.,circular link list node successor no node contain null basic link list last node contain null,3
The last element in a circular linked list points to the head of the list.,circular link list last node point back first node no null,5
The last element in a circular linked list points to the head of the list.,circular link list last node point back head link list,5
The last element in a circular linked list points to the head of the list.,no node circular link list contains null,3
The last element in a circular linked list points to the head of the list.,last item list point head,5
The last element in a circular linked list points to the head of the list.,circular link list last element point head list,5
The last element in a circular linked list points to the head of the list.,regular link list last object point null circular link list last object point back begin list,5
The last element in a circular linked list points to the head of the list.,circular link list s last node point begin list standard link list point null,5
The last element in a circular linked list points to the head of the list.,circular link list last node point first node,5
The last element in a circular linked list points to the head of the list.,circular link list s tail point head whereas basic link list s tail point null,5
The length of the longest path from the root to any of its leaves.,number level tree like tree minimum depth 3 height 8 8 node,3
The length of the longest path from the root to any of its leaves.,connection element call branch tree often call inverted tree normally draw root top,0
The length of the longest path from the root to any of its leaves.,equal number level level root node terminal node,4
The length of the longest path from the root to any of its leaves.,height tree depth subtrees be how many layer deep be,4
The length of the longest path from the root to any of its leaves.,height number time must progress down level tree reach leaf great distance root,5
The length of the longest path from the root to any of its leaves.,height tree number node on long path root leaf,5
The length of the longest path from the root to any of its leaves.,depth furthest leaf,4
The length of the longest path from the root to any of its leaves.,height number generation level root,4
The length of the longest path from the root to any of its leaves.,level generation tree people not count root generation,4
The length of the longest path from the root to any of its leaves.,number node on long path root tree leaf,5
The length of the longest path from the root to any of its leaves.,height tree term level node that tree empty height 0 otherwise height equal maximum level node,4
The length of the longest path from the root to any of its leaves.,number generation tree,4
The length of the longest path from the root to any of its leaves.,number node on long path root leaf,5
The length of the longest path from the root to any of its leaves.,distance deep leaf root,5
The length of the longest path from the root to any of its leaves.,height tree number level root leaf farthest away it,5
The length of the longest path from the root to any of its leaves.,number node root leaf,3
The length of the longest path from the root to any of its leaves.,height tree how many level node,4
The length of the longest path from the root to any of its leaves.,number node on long path root leaf,5
The length of the longest path from the root to any of its leaves.,number distinct level separation,3
The length of the longest path from the root to any of its leaves.,number generation level tree,4
The length of the longest path from the root to any of its leaves.,intensity child say begin one node thats one height add two child node two child node two child node youre current height 4,2
The length of the longest path from the root to any of its leaves.,height tree number node on longes path root leaf,5
The length of the longest path from the root to any of its leaves.,height tree length root furthest leaf,5
The length of the longest path from the root to any of its leaves.,number generation level tree,4
The linked lists can be of variable length.,memory allocate on fly item,4
The linked lists can be of variable length.,grow need array fix size,5
The linked lists can be of variable length.,unlike array link list insert delete without shift data change size easily,5
The linked lists can be of variable length.,array must define size element add link list w o define size,5
The linked lists can be of variable length.,expand need it not predetermine size,5
The linked lists can be of variable length.,link list grow dynamically item not require shift great awesome factor array,5
The linked lists can be of variable length.,link list not fix size not require shift item insertion deletion,5
The linked lists can be of variable length.,principal benefit link list conventional array order link item different order data item store memory on disk allow list item traverse different order link list self referential datatype contains pointer link another datum type link list permit insertion removal node point list constant time,3
The linked lists can be of variable length.,link list constant time insertion deletion,4
The linked lists can be of variable length.,link list abe grow need new size,5
The linked lists can be of variable length.,array size fix but link not fix,5
The linked lists can be of variable length.,link list increase size need array s size set create,5
The linked lists can be of variable length.,not fix size link list able grow need time access array base list take contant amount time link base like depends on i,5
The linked lists can be of variable length.,link list not set size grow shrink need,5
The linked lists can be of variable length.,size array restrict declaration insertion deletion value middle array not possible,5
The linked lists can be of variable length.,link list able grow size need not require shift item insertion deletion,5
The linked lists can be of variable length.,element insert link list point not need resize unlike array need be,5
The linked lists can be of variable length.,size not fix easy sort no shift easy insert item list,5
The linked lists can be of variable length.,resizeable,5
The linked lists can be of variable length.,no limit how many create array only hold give amount information,3
The linked lists can be of variable length.,array fix size link list able grow size need,5
The linked lists can be of variable length.,nearly infinite size limit only system memory also ability expand size dynamically,5
The linked lists can be of variable length.,link list indefinite size add take away easily little difficulty shift data,5
The linked lists can be of variable length.,insert delete item pointer base linked list without shift data,5
The linked lists can be of variable length.,link list able grow shrink size need,5
The linked lists can be of variable length.,link list grow shrink need to array fix size,5
The memory address of its operand.,return memory address operand,5
The memory address of its operand.,object s memory address,4
The memory address of its operand.,unary operator return memory address operand,5
The memory address of its operand.,return pointer,4
The memory address of its operand.,operator return memory address variable precedes,5
The memory address of its operand.,ampersand mean pass reference function call pointer variable instead variable itself pass function,3
The memory address of its operand.,address operator return memory address operand,5
The memory address of its operand.,return memory address operand,5
The memory address of its operand.,return memory address operand,5
The memory address of its operand.,return address number specify variable,5
The memory address of its operand.,operator return memory address operand,5
The memory address of its operand.,return memory address operand,5
The memory address of its operand.,address data store b return address b,4
The memory address of its operand.,memory address operand,5
The memory address of its operand.,memory address operand 0x000000 something along line,4
The memory address of its operand.,address variable memory,5
The memory address of its operand.,return memory address operand be apply normal variable give variable s memory address pointer variable might,4
The memory address of its operand.,address variable attach,5
The memory address of its operand.,memory address operand,5
The memory address of its operand.,address operator return memory address operand,5
The memory address of its operand.,return place memory element,5
The memory address of its operand.,reference variable,5
The memory address of its operand.,return address put front,5
The memory address of its operand.,operator return address variable,5
The memory address of its operand.,return address location memory item,5
"The name of the function and the list of parameters, including their types.",scope type parameter function give property defines against function,5
"The name of the function and the list of parameters, including their types.",function signature return type function name number type parameter,5
"The name of the function and the list of parameters, including their types.",name fuction return type parameter use,5
"The name of the function and the list of parameters, including their types.",function prototype contain function data member,1
"The name of the function and the list of parameters, including their types.",unique identifier function include input variable along function name exclude output type,5
"The name of the function and the list of parameters, including their types.",body function hold actual code,1
"The name of the function and the list of parameters, including their types.",include name accept parameter return type,5
"The name of the function and the list of parameters, including their types.",function signature tell function parameter include function call,2.5
"The name of the function and the list of parameters, including their types.",return type function name parameter type,5
"The name of the function and the list of parameters, including their types.",function name parameter call function signature,5
"The name of the function and the list of parameters, including their types.",signature function include name function number type parameter return type,5
"The name of the function and the list of parameters, including their types.",function signature element make unique variable call also suppose include program in,3.5
"The name of the function and the list of parameters, including their types.",name function parameter must receive order perform return type,5
"The name of the function and the list of parameters, including their types.",function signature specifies name input variable function,5
"The name of the function and the list of parameters, including their types.",function signature return type accept pas value type take,3
"The name of the function and the list of parameters, including their types.",function sig be class recognizes main function rather specification,0
"The name of the function and the list of parameters, including their types.",function signature use function s prototype set object type take parameter without name give object,5
"The name of the function and the list of parameters, including their types.",order number type data item include inside function parameter,4.5
"The name of the function and the list of parameters, including their types.",uniquely separate overloaded function include return type parameter list function,4.5
"The name of the function and the list of parameters, including their types.",declaration function,2
"The name of the function and the list of parameters, including their types.",name function accepts return,5
"The name of the function and the list of parameters, including their types.",function s name well return accepts,5
"The name of the function and the list of parameters, including their types.",fuction name parameter,5
"The name of the function and the list of parameters, including their types.",function signature include name function parameter body,2.5
"The name of the function and the list of parameters, including their types.",function signature function s parameter type name function return type not part function signature,5
"The name of the function and the list of parameters, including their types.",contains function name paramaters return type not include,5
"The name of the function and the list of parameters, including their types.",function signature declaration function include parameter type number parameter,5
"The name of the function and the list of parameters, including their types.",return type input parameter,5
"The name of the function and the list of parameters, including their types.",name function argument pass function,5
"The name of the function and the list of parameters, including their types.",parameter need return type name function,5
The name of the function and the types of the parameters.,function name input paramaters,5
The name of the function and the types of the parameters.,input parameter return type,1
The name of the function and the types of the parameters.,function signature consist function prototype tell general information function name parameter scope in miscellaneous information,4
The name of the function and the types of the parameters.,portion function prototyp tha function name arguments not return type,5
The name of the function and the types of the parameters.,include name function type argument not specify function return type function scope must unqiue signature,5
The name of the function and the types of the parameters.,name function type argument,5
The name of the function and the types of the parameters.,include name function type argument,5
The name of the function and the types of the parameters.,name function type argument include number type order parameter appear in,5
The name of the function and the types of the parameters.,function signature include name function type arguments not return type,5
The name of the function and the types of the parameters.,function signature include name function type argument,5
The name of the function and the types of the parameters.,function s name parameter,5
The name of the function and the types of the parameters.,function signature include function s return type parameter semi colon,1
The name of the function and the types of the parameters.,include function name parameter list not include return type function signature must different,5
The name of the function and the types of the parameters.,name paramaters scope general function information,4
The name of the function and the types of the parameters.,name function type argument,5
The name of the function and the types of the parameters.,include name program type parameter take also include brief description function do,4
The name of the function and the types of the parameters.,name function parameter,5
The name of the function and the types of the parameters.,function signature include method name input type,5
The name of the function and the types of the parameters.,identification function data type parameter name data type variable,5
The name of the function and the types of the parameters.,name function type argument,5
The name of the function and the types of the parameters.,function signature include name function type argument,5
The name of the function and the types of the parameters.,return type input parameter,1
The name of the function and the types of the parameters.,name function type argument,5
The name of the function and the types of the parameters.,function name parameter,5
The name of the function and the types of the parameters.,signature include result type thrown error,1
The name of the function and the types of the parameters.,include specific information function input output variable type how many each,1
The name of the function and the types of the parameters.,include name function type argument,5
The name of the function and the types of the parameters.,portion function prototype include name function type argument,5
The name of the function and the types of the parameters.,function s return type parameter list,1
The size in bytes of its operand.,return size byte certain variable type,4
The size in bytes of its operand.,size operand byte use variable name type name constant value,5
The size in bytes of its operand.,return size array bytes program compilation,4
The size in bytes of its operand.,total number byte array,4
The size in bytes of its operand.,sizeof operator return size operand,5
The size in bytes of its operand.,sizeof operator return total number byte operand,5
The size in bytes of its operand.,byte size date store ina variable,4
The size in bytes of its operand.,size information bit,1
The size in bytes of its operand.,return size operand byte,5
The size in bytes of its operand.,size string,3
The size in bytes of its operand.,return size operand byte,5
The size in bytes of its operand.,number byte array program compilation,4
The size in bytes of its operand.,total number byte object,4
The size in bytes of its operand.,sizeof return size byte respective object,4
The size in bytes of its operand.,sizeof operator return size byte array parameter,3
The size in bytes of its operand.,size byte need store object memory,4
The size in bytes of its operand.,sizeof return size operand byte,5
The size in bytes of its operand.,return size byte specify data,4
The size in bytes of its operand.,return size operand memory check compiler time,5
The size in bytes of its operand.,yield size byte operand expression parenthesized name type,3
The size in bytes of its operand.,amount memory require specific parameter ints double,4
The size in bytes of its operand.,size operand byte,5
The size in bytes of its operand.,size list object,4
The size in bytes of its operand.,return size argument pass,5
The size in bytes of its operand.,return size array byte,4
The size in bytes of its operand.,sizeof return size operand byte,5
The static arrays are intialized only once when the function is called.,static array call only once declare complier ignore static line come again,3.5
The static arrays are intialized only once when the function is called.,array declare static retains modify element call upon late element modify again array not declare static keep original element,5
The static arrays are intialized only once when the function is called.,static array call anywhere,3
The static arrays are intialized only once when the function is called.,static array one keep value not initialize every time class function call data not lose function end,5
The static arrays are intialized only once when the function is called.,one declare static one already define program know length array start whereas non static array declare assign later,2
The static arrays are intialized only once when the function is called.,non static array must reinitialize every function call static array only initialize once unless otherwise force,5
The static arrays are intialized only once when the function is called.,array declare static not change one not declare static alter,0.5
The static arrays are intialized only once when the function is called.,define static array doese not lose scope locala function static array make programm scalable non static array lose scope inside local function,4
The static arrays are intialized only once when the function is called.,array declare static remains throughout execution program,0.5
The static arrays are intialized only once when the function is called.,data static array cannot change,0.5
The static arrays are intialized only once when the function is called.,array declare static allocated program begin run not free program exit limit scope non static array allocate free every time come scope,5
The static arrays are intialized only once when the function is called.,array static not change uninitialize call later unless explicitly act upon not terminate change across object automatic local array clear uninitialized call later outside specific scope,5
The static arrays are intialized only once when the function is called.,standard array terminate function call finish static array not remove memory parent function terminate leave available function or new instance original function,5
The static arrays are intialized only once when the function is called.,array declare static retain value store element function call not reinitialize default value,5
The static arrays are intialized only once when the function is called.,static array cannot change normal array change,0.5
The static arrays are intialized only once when the function is called.,static array edit throughout program non static array only edit within give function,3
The static arrays are intialized only once when the function is called.,array declare static only use function call in constant array static another way say const,0.5
The static arrays are intialized only once when the function is called.,static initialize non static cannot c,1
The static arrays are intialized only once when the function is called.,static array cannot change regular array change pass function manually,0.5
The static arrays are intialized only once when the function is called.,static array only specific size cannot grow also static array cannot accessed outside program create it,2
The static arrays are intialized only once when the function is called.,array declare static accessed outside method declare without pass argument function class,3
The static arrays are intialized only once when the function is called.,static array predetermine size size cannot alter,2
The static arrays are intialized only once when the function is called.,static array available whole program whereas array not static only available within scope declare pas by reference,3.5
The static arrays are intialized only once when the function is called.,static predetermine size cannot pass vi versa,2
The static arrays are intialized only once when the function is called.,array declare static not create initialize function call destroyed function terminates,5
The static arrays are intialized only once when the function is called.,static array class scope allow remain array recycle,5
The static arrays are intialized only once when the function is called.,array declare static cause anything not initialize set 0,1
The static arrays are intialized only once when the function is called.,static array retain modify value after function call automatic array reset initial value function end,5
The static arrays are intialized only once when the function is called.,static array null character end array,2.5
The static arrays are intialized only once when the function is called.,value array not delcared static remain constant array declare const value within array manipulate,0.5
The strings declared using an array of characters have a null element added at the end of the array.,type string class safer array character,3
The strings declared using an array of characters have a null element added at the end of the array.,array character null character 0 end array signify array s end string not this,5
The strings declared using an array of characters have a null element added at the end of the array.,char array individual letter access directly array subscript notation string array array subscript return entire string,1
The strings declared using an array of characters have a null element added at the end of the array.,sting only modify function string class array character modify user,3
The strings declared using an array of characters have a null element added at the end of the array.,unlike string declare use type string string declare use array character programmer must provide null terminate character must ensure array large enough hold string null terminating character,5
The strings declared using an array of characters have a null element added at the end of the array.,char array read string individual character string literal array read entire string,2
The strings declared using an array of characters have a null element added at the end of the array.,array character only hold many character array size string not limit,4
The strings declared using an array of characters have a null element added at the end of the array.,declare string include white space declare array character not include white space,0
The strings declared using an array of characters have a null element added at the end of the array.,string declare use type string vary length string declare use array character not extend past array length,4
The strings declared using an array of characters have a null element added at the end of the array.,type string several build in function not available use char array individual character array directly accessible character string type string,3
The strings declared using an array of characters have a null element added at the end of the array.,string class standard library method modify it whereas char array on able modifie user,4
The strings declared using an array of characters have a null element added at the end of the array.,string use char array much easy manipulate string object character store separately rather whole,1
The strings declared using an array of characters have a null element added at the end of the array.,array character one element string doesnt have termination element null,5
The strings declared using an array of characters have a null element added at the end of the array.,data class type string design handle character data many function build class library deal them array character however subject rule array no real additional functionality another difference string class deal null character implicitly unlike array character must handle null character explicitly,5
The strings declared using an array of characters have a null element added at the end of the array.,type string array char make array single letter character array string actual array word or array char array,0
The strings declared using an array of characters have a null element added at the end of the array.,use array character limit size array character declare type end string acknowledge white space,3
The strings declared using an array of characters have a null element added at the end of the array.,use array individual character access manipulate,1
The strings declared using an array of characters have a null element added at the end of the array.,array collection similar data type ex int a 10 ten indicate size array index array give only integer value array a string mean collection group character string declaration datatype usually cause storage allocate memory capable hold predetermined number symbol however arrays declare contain value non reference data type multiple arrarys type,1
The strings declared using an array of characters have a null element added at the end of the array.,array character set length type string virtually unlimited length,4
The strings declared using an array of characters have a null element added at the end of the array.,array character need termination character well size specification whether explicit implicit,5
The strings declared using an array of characters have a null element added at the end of the array.,type string array contain additional terminating null character,3
The strings declared using an array of characters have a null element added at the end of the array.,they re basically same however string end w null character denote end string and size char array potential size must declare limited,2
The strings declared using an array of characters have a null element added at the end of the array.,type string us less storage change string once array character make permutation word use character store array without need actually access change variable array character change how they re access,1
The strings declared using an array of characters have a null element added at the end of the array.,string declare use array character result data loss character array not initialize large enough,4
The strings declared using an array of characters have a null element added at the end of the array.,string represent character array end null character declare object type string like type example string s,5
The strings declared using an array of characters have a null element added at the end of the array.,string declare used array character contain character array special string termination character call null character versus type string,5
The strings declared using an array of characters have a null element added at the end of the array.,cant modify individual character type string array character type array modify individual character,1
The strings declared using an array of characters have a null element added at the end of the array.,string type string that string not part array list one declare array actually array character able point detected,2
The strings declared using an array of characters have a null element added at the end of the array.,array pass reference therefore array character change memory change not variable,3
The strings declared using an array of characters have a null element added at the end of the array.,use array character one store manipulate string rather type string variable,1
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine production maintenance,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),verification br debug,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine cod,5
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refining stage production stage maintenance stage,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),implementation phase maintenance phase effect,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),test stage direct influence on final version program debug finalization software revision,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),second half elaboration phase construction phase transition phase,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),stage influence except set program requirement test fails change whole design implementation etc program well final outcome,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine production maintenance,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine step production step maintenance stage,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),rup stage software life cycle influence testing stage be elaboration phase refine progject vision iterative devilopment core system development system requirement accurate time cost estimate construction phase iterative development remain system transition phase test deployment system,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),remove logical error test valid data random data actual data,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),verification cod refine solution maintenance influence testing stage,4
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),depend on how work do test spread throughout process prevent error show up later on due lack foresight,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine production maintenance,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),directly refine cod refine right before test phase cod right after test phase indirectly production maintenance refining occur before last two stage software life cycle,5
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine solution,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),elaboration construction transition affect test,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refine solution production maintenance influence testing stage,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),cod refining,5
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),elaboration construction transition,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),1 specification 2 design 3 risk analysis 4 verification 5 cod 6 test 7 refine 8 production 9 maintenance,1
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refining,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),test refine production maintenance,3
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),refining possibly design test phase reveals problem design production affect program unworkable current form lead later production time originally estimate also affect cod after test need rewrite code program remove error,5
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),individual component step analysis design implementing code well entire system test execution requirement identify analysis stage i e main output,1
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),elaboration construction transition,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),test affect part life cycle make go back specification not test well,2
The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),cod,3
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas reference reference argument function int pas reference pointer argument function int,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas either pointer cant move data point cant change neither,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas value pas reference reference pointer argument,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer nonconstant data constant pointer nonconstant data nonconstant pointer constant data constant point constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas value pas reference reference argument pass reference pointer argument,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",constant pointer constant data constant pointer nonconstant data nonconstant pointer constant data nonconstant pointer nonconstant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas pointer memory address,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",1 nonconstant pointer nonconstant data delcaration no include const qualifier 2 nonconstant pointer constant data provide performance pas by reference protection pas by value 3 constant pointer nonconstant data 4 constant pointer constant date,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",only two way pass something value reference use dot pointer operator within receive function use operator inside pass function,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer nonconstant data constant pointer nonconstant data nonconstant pointer constant data constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas reference dereference function,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pass value reference,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",address bptr directly bptr,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",four way pas pointer function 1 non constant pointer non constant data 2 non constant pointer constant data 3 constant pointer non constant data 4 constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",non constant pointer non constant data non constant pointer constant data constant pointer constant data constant pointer non constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",argument reference,1
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas pointer pointer pas reference pointer,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",four different way nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data,5
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pointer pass function value reference reference argument reference pointer argument,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pas by value pas by reference,2
"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconst gt nonconst const gt nonconst nonconst gt const const gt const,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,many problem solve iteration recursion either go condition infinite execution termination test omit,2
They both involve repetition; they both have termination tests; they can both occur infinitely.,repeat loop condition meet exit loop capable enter infinite loop,3
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination test gradually approach termination occur infinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination test gradually approach termination occur infinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination case graduatlly approach termination case occur infinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,anything recursively iteratively,2
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination test,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,incorrectly write either result infinite loop perform task over,3
They both involve repetition; they both have termination tests; they can both occur infinitely.,need kind base case tell loop need stop,3
They both involve repetition; they both have termination tests; they can both occur infinitely.,involve termination test use control statement repition solve problem also result infinite loop,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,discuss early recursion use process iterative action recursion use calculation answer describe function relate itself,1
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination test gradually approach termination occur infinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,iteration recursion many similarity base on control statement involve repetition involve termination test gradually approach termination occur infinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,not answer,0
They both involve repetition; they both have termination tests; they can both occur infinitely.,able repetiive task however recurisve call different parameter defines exit clause guaranteeed reach iterative include loop iterates pre determine number time check exit clause every time,2
They both involve repetition; they both have termination tests; they can both occur infinitely.,use repetition control test terminate infinitely repeat not define correctly,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repitition involve termination test gradually approach termination potentially occur infinetly,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,use solve type problem task cirtain conditional statement reach it called base case recursion,3
They both involve repetition; they both have termination tests; they can both occur infinitely.,anything iterativly recursively,2
They both involve repetition; they both have termination tests; they can both occur infinitely.,rely on repetition base case become infinite loop anything recursive also solve iteration,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination test within loop,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,repetative end test,4
They both involve repetition; they both have termination tests; they can both occur infinitely.,iteration recursion use repetition perform several simple operation algorithms successively reach certain limit involve termination test find limit slowly approach termination limit base on control statement well cod poorly continue on forever compiler computer either lock up shuts down halt operation,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement iteration repetition structure recursion selection structure involve repetition iteration explicitly use repetition structure recursion repeat function call involve termination test iteration loop termination test recursion base case gradually approach termination iteration modifies counter loop termination test fail recursion produce progressively simple version problem occur indefinitely iteration if loop continuation condition never fail recursion if recursion step not simplify problem,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,method repeat task,1
They both involve repetition; they both have termination tests; they can both occur infinitely.,iteration recursion base on control statement involve repetition also occur indefinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,repetition termination test eventually terminate occur infinately,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,involve control repetition structure termination test also loop forever,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve termination test gradually approach termination occur infinitely,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement gradually approach termination end termination test involve repetition repeat infinitely termination requirement not meet,5
They both involve repetition; they both have termination tests; they can both occur infinitely.,base on control statement involve repetition involve terminal test occur infinitly,5
Through iteration.,recursive function solve use iterative method,5
Through iteration.,iteration loop loop able accomplish desire outcome faster recursion also hard understand,5
Through iteration.,use iterative call,5
Through iteration.,iteration,5
Through iteration.,use iterative solution instead,5
Through iteration.,iteration use loop,5
Through iteration.,use iterative solution for while loop,5
Through iteration.,iteration performer series check loop,5
Through iteration.,many recursive solution also solve loop control statement while for do while etc,5
Through iteration.,also solve problem iteratively,5
Through iteration.,use iteration loop,5
Through iteration.,use iterative function repeat specify operation set operation terminate point base case reach,5
Through iteration.,alt way use function parameter call to function,2.5
Through iteration.,itteration like loop loop loop,5
Through iteration.,recursive function often solve use iterative function run faster often complicate,5
Through iteration.,iteratively,5
Through iteration.,alternative way solve problem solve use recursion iteration,5
Through iteration.,iterative,5
Through iteration.,iteration efficient repetition structure,5
Through iteration.,iterative function,5
Through iteration.,iteration,5
Through iteration.,iteration,5
Through iteration.,another alternative way solve problem instead use recursive function use iteration,5
Through iteration.,one use iteration use simple while for loop,5
Through iteration.,alternative method use loop program instead function call itself,5
Through iteration.,iteration alternative way solve problem,5
Through iteration.,alternative solve problem use recursive function solve problem use iteration,5
Through iteration.,problem solve recursively solve iterative function iterative replacement recursive function difficult program often lead efficient solution problem,5
To simulate the behaviour of portions of the desired software product.,provide limited proof concept verify client before actually program whole application,2
To simulate the behaviour of portions of the desired software product.,provide example model how finished program perfom br provide forsight challanges encounter br provide opportunity introduce change finish program,5
To simulate the behaviour of portions of the desired software product.,address major issue creation program no way account possible bug program possible prove program tangible,3
To simulate the behaviour of portions of the desired software product.,prototype program approach program enable one take organize approach develop effective program minimal error strategic pattern solve problem i e book give example costumer withdraw money bank approach take on pseudo code level ooa design lvl before proceed create solution,3
To simulate the behaviour of portions of the desired software product.,program simulates behavior portion desire software product,5
To simulate the behaviour of portions of the desired software product.,simulate problem solve part problem,4
To simulate the behaviour of portions of the desired software product.,simulate behavior only portion desire software product,5
To simulate the behaviour of portions of the desired software product.,prototype program use problem solve collect data problem,1
To simulate the behaviour of portions of the desired software product.,prototype program part specification phase software problem solvin employ illustrate how key problem problem solve program sometimes serve base program expand upon,4
To simulate the behaviour of portions of the desired software product.,simulates behavior portion desire software product,5
To simulate the behaviour of portions of the desired software product.,lay basic give start point actual problem solve,2
To simulate the behaviour of portions of the desired software product.,test main function program leave finer detail,2
To simulate the behaviour of portions of the desired software product.,high risk problem address prototype program make sure program feasible prototype also use show company software possibly program,4
To simulate the behaviour of portions of the desired software product.,simulates behavior portion desire software product,5
To simulate the behaviour of portions of the desired software product.,use let user first idea complete program allow client evaluate program generate much feedback include software specification project estimation total project,3
To simulate the behaviour of portions of the desired software product.,find problem error program before finalized,2
To simulate the behaviour of portions of the desired software product.,simulate portion desire final product quick easy program small specific job way help see problem how solve final project,5
To simulate the behaviour of portions of the desired software product.,show certain part program work suppose,4
To simulate the behaviour of portions of the desired software product.,role prototype program help spot key problem arise actual programing,2
To simulate the behaviour of portions of the desired software product.,define specification phase prototype stimulate behavior portion desire software product meaning role prototype temporary solution program refine use extensively problem solve,5
To simulate the behaviour of portions of the desired software product.,prototype program provide basic groundwork enhance improve solution problem,2
To simulate the behaviour of portions of the desired software product.,break whole program prototype program simulate part final program,5
To simulate the behaviour of portions of the desired software product.,prototype program give general idea end product do without time effort write entire program,4
To simulate the behaviour of portions of the desired software product.,program stimulates behavior portion desire software product,5
To simulate the behaviour of portions of the desired software product.,get early feedback user early stage development show user first idea program do look like make sure program meet requirement before intense programming begin,3
To simulate the behaviour of portions of the desired software product.,program simulates behavior portion desire software product,5
To simulate the behaviour of portions of the desired software product.,prototype program simulate behavior portion desire software product allow error check,5
To simulate the behaviour of portions of the desired software product.,ease understand problem discussion ease understanding program,2
"To store a class interface, including data members and member function prototypes.",class definition place,3
"To store a class interface, including data members and member function prototypes.",role header file list function class hiding inner working function,5
"To store a class interface, including data members and member function prototypes.",create comon area contain reusable function,3
"To store a class interface, including data members and member function prototypes.",promote function reusuablitly,3
"To store a class interface, including data members and member function prototypes.",header file declare class data function available class,5
"To store a class interface, including data members and member function prototypes.",â instructâ compiler on how interface library user write component,2
"To store a class interface, including data members and member function prototypes.",header file usually contain class and or function prototype,4
"To store a class interface, including data members and member function prototypes.",include hat h allow use hat container call act pull name hat header file hat include function storage retrieval content mainly put peek pull,0
"To store a class interface, including data members and member function prototypes.",header file contain code use multiple file,3
"To store a class interface, including data members and member function prototypes.",contains standard c library s i e string,0
"To store a class interface, including data members and member function prototypes.",header file consist reusable source code class file convention h filename extension differs cpp file contain source code,4
"To store a class interface, including data members and member function prototypes.",allow compiler recognize class use elsewhere,3
"To store a class interface, including data members and member function prototypes.",header file cross communication method source file help limit size individual program without header file program 1 large lump code thus fairly hard debug traverse,3
"To store a class interface, including data members and member function prototypes.",header file file use store list prototye function data member,5
"To store a class interface, including data members and member function prototypes.",header file allow separation declaration implementation separate file,5
"To store a class interface, including data members and member function prototypes.",header file reusable source code file programer use,3
"To store a class interface, including data members and member function prototypes.",allow compiler recognize class use elsewhere,3
"To store a class interface, including data members and member function prototypes.",main role header file use share information among various file,3
"To store a class interface, including data members and member function prototypes.",header file separate file class define allow compiler recognize class use elsewhere,4
"To store a class interface, including data members and member function prototypes.",header file access c standard library make certain class like class string work,0
"To store a class interface, including data members and member function prototypes.",hold reusable content module separate actual source code file easily reference employ different program,5
"To store a class interface, including data members and member function prototypes.",header file show user type go come function not allow user manipulate actual code function,5
"To store a class interface, including data members and member function prototypes.",separate source code main function allow method class include program without direct coding allow re usability,4
"To store a class interface, including data members and member function prototypes.",declare function use class,3
"To store a class interface, including data members and member function prototypes.",header file declare class member function,3
"To store a class interface, including data members and member function prototypes.",provide information content library include definition class declaration function data type constant,5
"To store a class interface, including data members and member function prototypes.",hide definition detail class also help readability main c file,4
"To store a class interface, including data members and member function prototypes.",no,0
"To store a class interface, including data members and member function prototypes.",contains reusable source code use class,3
"Traverse the left subtree, then the root, then the right subtree.",traverse node leave visit root traverse node on right,5
"Traverse the left subtree, then the root, then the right subtree.",order start root right child leave child recursively,0
"Traverse the left subtree, then the root, then the right subtree.",inorder traversal visit leave branch node all way deep leave most leaf before visit node itself after visit entire leave branch node visit node s right branch follow pattern leave child node right child,5
"Traverse the left subtree, then the root, then the right subtree.",traversal visit leave branch first parent node right branch recursively,5
"Traverse the left subtree, then the root, then the right subtree.",leave child gt parent gt right child,5
"Traverse the left subtree, then the root, then the right subtree.",left side tree root right side tree,5
"Traverse the left subtree, then the root, then the right subtree.",go low high inside tree,1
"Traverse the left subtree, then the root, then the right subtree.",go furthest down leave node root right if leave right exist return one node previous reach root go furthest down leave node on right side root continue process,5
"Traverse the left subtree, then the root, then the right subtree.",root middle leave subtree traverse first root finally right subtree,5
"Traverse the left subtree, then the root, then the right subtree.",void inorder ptnode ptr ptr inorder ptr gt leave cout lt lt ptr gt data inorder ptr gt right,5
"Traverse the left subtree, then the root, then the right subtree.",every node binary tree first visit leave sub tree if there visit parent node itself right sub tree if there,5
"Traverse the left subtree, then the root, then the right subtree.",start display node furthest right node node on right recursive order,3
"Traverse the left subtree, then the root, then the right subtree.",order go leave root right,5
"Traverse the left subtree, then the root, then the right subtree.",inorder traversal binary tree visit node binary tree order accord data value,2
"Traverse the left subtree, then the root, then the right subtree.",inorder traversal binary tree retrieve start furthest leave hand leaf check it itâ s parent itâ s right side sibling go up level repeat get root,4
"Traverse the left subtree, then the root, then the right subtree.",travel leave right,3
"Traverse the left subtree, then the root, then the right subtree.",print tree order least great do go far leave down tree possible printing parent right tree move up tree,5
"Traverse the left subtree, then the root, then the right subtree.",mean traverse one subtree node look node before traverse subtree node,4
"Traverse the left subtree, then the root, then the right subtree.",traverse leave subtree visit root traverse right subtree,5
"Traverse the left subtree, then the root, then the right subtree.",leave middle right,5
"Traverse the left subtree, then the root, then the right subtree.",use visit node binary search tree search key order,3
"Traverse the left subtree, then the root, then the right subtree.",postorder,0
"Traverse the left subtree, then the root, then the right subtree.",traverse binary tree inorder let visit node order accord data value,2
"Traverse the left subtree, then the root, then the right subtree.",level order traversal traversal method level visit successively start level 0 the root node node visit left right on level push pop method,0
Unlimited number.,infinite constructor long signature different,5
Unlimited number.,no limit number constructor class like function constructor overload,5
Unlimited number.,one,0
Unlimited number.,many want different parameter,5
Unlimited number.,many need,5
Unlimited number.,theoretically unlimited long define programmer,5
Unlimited number.,infinite,5
Unlimited number.,depends on number data member class,0
Unlimited number.,c constructor overload one constructor class different parameter,5
Unlimited number.,many need,5
Unlimited number.,many need depend on how many variable one wish directly modify leave default instantiating object,5
Unlimited number.,one,0
Unlimited number.,default one overload create many constructor necessary,5
Unlimited number.,many want long unique argument list,5
Unlimited number.,many user decides use,5
Unlimited number.,large amount constructor create give class overload two constructor different type number parameter create say overloaded c recognize constructor use base on type variable pass return,5
Unlimited number.,overload constructor need,5
Unlimited number.,depends on number object object constructor,1
Unlimited number.,1,0
Unlimited number.,many programmer want create,5
Unlimited number.,many want need,5
Unlimited number.,depends type class define typically constructor call object,1
Unlimited number.,number want,5
Unlimited number.,one per class,0
Unlimited number.,many want,5
Unlimited number.,many want long different parameter,5
Unlimited number.,several,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",fix size array max n element need keep track front rear array,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",head pointer point first least current data enter tail point current data enter method must create tail pointer not leave array,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",implement array only add item end array only remove item begin array,2
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",keep track front item rear item circular array use modulo function,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",remove element shift elements one space back,2
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",use first element list remove point insert end f shift element down time remove item unless make array circular,3
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",add item fix size array pull item call on start index increase start index call now next index element array,3
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",array fix size queue maximum n element,1
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",use array implement queue element item 0 top element array every time element insert item array push back one space top element always remove first,2
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",pointer base implementation queue use linear link list two external pointer one front one back,0
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",keep track front rear index either 1 dequeue item shift array leave 2 use wrap configuration,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",boolean isfullq queue rear max_queue_size 1,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",keep track front back array increase decrease element inside array,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",make use front pointer tail pointer tail pointer reach end array get reset front array two pointer equal queue either full one element,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",utilize index front back front 0 add item back index incremented,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",make array size add on front delete back keep track two know full add subtract,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",array type queue fix length,0
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",create fix array size 2 integer point begin end que special case know que empty full,4
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",application fix size queue not present problem use array represent queue,1
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",add data first element last take data first element last,2
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",use array queue size array allocate limit size queue array base queue class must keep track front back queue need wrap around array,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",declare size array special conditional statement pointer make sure re use array say array 20 element load up 18 dequeue 3 enqueue 4 element want loop back index 0 continue there process save resource,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",use begin array removal point queue or begin queue ith element end queue,3
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",storage class array keep track index first last item array wrap around end array full,5
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",take array put queue stack traverse list keep track top bottom,3
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",create array max size queue adjust item make follow fifo procedure,2
"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",declare two variable â frontâ â rearâ use denote element array access increment â rearâ whenever data enqueued end increment â frontâ whenever data dequeued,5
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variable declare class method,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),declare right before use good practice declare begin program label food,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variable declare ever define either inside block locally outside block globally,4
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),local variable declare inside method global variable declare body,5
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),local variable declare inside method function use begin method global variable declare outside function method generally before function define,5
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),declaration function statement statement body if for while while statement namespaces header etc almost anywhere anywhere program long on line,2
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),function main before use variable,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),globally entire program locally individual function include statement,4
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),global variable declare body code local variable declare function use unless function pass variable variable always declare before use,5
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),good programing practice declare before main least declared before used,2
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),inside function scope outside function scope case global variable,5
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variable declare main function before operation attempt variable,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),top,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),main function,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),usually declare beginning before used program always contain name data type,2
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),inside method,2
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variable usually declare begin module c code,2
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),global variable declare main function local variable declare function,3
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variable usually declare begin c program declare program long appear before call upon,4
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),anywhere declare depends on want accessible their scope,4
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),declare globally before main method but also outside it variables subject only method they re scoped within still declare begin method but inside it,5
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),after declaration variable s data type,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),before use,2
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),anywhere scope before use,3
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variable declare before actually use declare before main use globally,3
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),anywhere code top middle code anywhere,3
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),begin program before main start,1
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),depends itâ s global declare side source code use every scope however local variable one declare local function etc obviously doesnâ t need declare outside variable see how used function block call for,4
Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),main function usually top code declare almost anywhere must declare before code use act upon them,3
When the size of the array to be sorted is 1 (or 2),list size 1 already sort,5
When the size of the array to be sorted is 1 (or 2),only one element subarray,5
When the size of the array to be sorted is 1 (or 2),base case length current array 1,5
When the size of the array to be sorted is 1 (or 2),size list send lt 1,5
When the size of the array to be sorted is 1 (or 2),array sort 0 1 element,5
When the size of the array to be sorted is 1 (or 2),sequence number zero one element,5
When the size of the array to be sorted is 1 (or 2),n log n,1
When the size of the array to be sorted is 1 (or 2),t n 0 n lt 2,4
When the size of the array to be sorted is 1 (or 2),array one element,5
When the size of the array to be sorted is 1 (or 2),array length 1,5
When the size of the array to be sorted is 1 (or 2),list array only 1 element,5
When the size of the array to be sorted is 1 (or 2),o nlog n,1
When the size of the array to be sorted is 1 (or 2),best case one element one element sort,5
When the size of the array to be sorted is 1 (or 2),base case recursive implementation merge sort sequence pass merge sort le 2 element,5
When the size of the array to be sorted is 1 (or 2),only one element array start element array end element,4
When the size of the array to be sorted is 1 (or 2),one object split array sort,5
When the size of the array to be sorted is 1 (or 2),base case recursive implementation merge sort one,5
When the size of the array to be sorted is 1 (or 2),array length less equal 1 array return array merge together,5
When the size of the array to be sorted is 1 (or 2),o n log n,1
When the size of the array to be sorted is 1 (or 2),base case recursive merge sort one number one number sort list regardless number be,5
When the size of the array to be sorted is 1 (or 2),single element on array,5
When the size of the array to be sorted is 1 (or 2),single element array,5
When the size of the array to be sorted is 1 (or 2),only must merge sort,3
When the size of the array to be sorted is 1 (or 2),right gt leave mid right leave 2 m_sort number temp leave mid m_sort number temp mid 1 right merge number temp leave mid 1 right,2
When the size of the array to be sorted is 1 (or 2),one element array,5
When the size of the array to be sorted is 1 (or 2),half original array nothing else sort put half back together,2
When the size of the array to be sorted is 1 (or 2),best case bad case o n log n recursive merge sort,1
